"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeValidationResults = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _immutable = require("immutable");

var getError = function getError(errors, key) {
  var error = errors[key];
  if (typeof error === 'string') return error;

  if (Array.isArray(error) && error.error) {
    return error.error;
  }

  return '';
};

var updateItems = function updateItems(list, errorObj, force) {
  var errors = errorObj || {};
  return list.map(function (listItem, index) {
    var error = Array.isArray(errors) ? errors[index] : errors;
    return listItem.update('fields', (0, _immutable.Map)(), function (fields) {
      return updateMap(fields, error, force);
    });
  });
};

var updateMap = function updateMap(fields, errorObj, force) {
  var errors = errorObj || {};
  return fields.entrySeq().reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        key = _ref2[0],
        field = _ref2[1];

    var next = field.get('items') ? field.update('items', (0, _immutable.List)(), function (items) {
      return updateItems(items, errors[key], force);
    }) : field;
    var error = getError(errors, key);
    var touched = next.getIn(['current', 'touched'], force) || force;

    if (touched) {
      return acc.mergeIn([key], next).setIn([key, 'current', 'error'], Boolean(error)).setIn([key, 'current', 'helperText'], error);
    }

    return acc.mergeIn([key], next);
  }, (0, _immutable.Map)());
};

var mergeValidationResults = function mergeValidationResults(state) {
  var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return state.update('fields', (0, _immutable.Map)(), function (fields) {
    return updateMap(fields, errors, force);
  });
};

exports.mergeValidationResults = mergeValidationResults;