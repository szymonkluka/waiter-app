"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldPath = exports.fieldReducer = exports.initState = exports.listenersKey = exports.fieldsKey = exports.removedFieldsKey = exports.actions = exports.actionTypes = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _immutable = require("immutable");

var _syncListIndexes = require("./syncListIndexes");

var _mergeValidationResults = require("./mergeValidationResults");

var _mergeFormValues = require("../helpers/mergeFormValues");

var _resolveLabel = require("./resolveLabel");

var actionTypes = {
  insertField: 'insertField',
  removeField: 'removeField',
  addListItem: 'addListItem',
  removeListItem: 'removeListItem',
  updateListIndex: 'updateListIndex',
  reset: 'reset',
  touched: 'touched',
  updateValue: 'updateValue',
  updateList: 'updateList',
  updateFieldDefinition: 'updateFieldDefinition',
  validateAll: 'validateAll',
  validationResult: 'validationResult',
  addListener: 'addListener',
  removeListener: 'removeListener'
};
exports.actionTypes = actionTypes;
var actions = {
  insertField: function insertField(fieldName, fieldState) {
    return {
      type: actionTypes.insertField,
      fieldName: fieldName,
      payload: fieldState
    };
  },
  removeField: function removeField(fieldName) {
    return {
      type: actionTypes.removeField,
      fieldName: fieldName
    };
  },
  addListItem: function addListItem(fieldName, fieldState) {
    return {
      type: actionTypes.addListItem,
      fieldName: fieldName,
      payload: fieldState
    };
  },
  removeListItem: function removeListItem(fieldName, index) {
    return {
      type: actionTypes.removeListItem,
      fieldName: fieldName,
      payload: index
    };
  },
  updateListIndex: function updateListIndex(fieldName, fromIndex, toIndex) {
    return {
      type: actionTypes.updateListIndex,
      fieldName: fieldName,
      payload: {
        fromIndex: fromIndex,
        toIndex: toIndex
      }
    };
  },
  reset: function reset(state) {
    return {
      type: actionTypes.reset,
      payload: state
    };
  },
  touched: function touched(fieldName) {
    return {
      type: actionTypes.touched,
      fieldName: fieldName
    };
  },
  updateValue: function updateValue(fieldName, value) {
    return {
      type: actionTypes.updateValue,
      fieldName: fieldName,
      payload: value
    };
  },
  updateList: function updateList(fieldName, items) {
    return {
      type: actionTypes.updateList,
      fieldName: fieldName,
      payload: items
    };
  },
  updateFieldDefinition: function updateFieldDefinition(fieldName, payload) {
    return {
      type: actionTypes.updateFieldDefinition,
      fieldName: fieldName,
      payload: payload
    };
  },
  validateAll: function validateAll(errors) {
    return {
      type: actionTypes.validateAll,
      payload: errors
    };
  },
  validationResult: function validationResult(fieldName, error, helperText) {
    return {
      type: actionTypes.validationResult,
      fieldName: fieldName,
      payload: {
        error: error,
        helperText: helperText
      }
    };
  },
  addListener: function addListener(fieldName, listener) {
    return {
      type: actionTypes.addListener,
      fieldName: fieldName,
      payload: listener
    };
  },
  removeListener: function removeListener(fieldName, listener) {
    return {
      type: actionTypes.removeListener,
      fieldName: fieldName,
      payload: listener
    };
  }
};
exports.actions = actions;
var removedFieldsKey = 'removedFields';
exports.removedFieldsKey = removedFieldsKey;
var fieldsKey = 'fields';
exports.fieldsKey = fieldsKey;
var listenersKey = 'listeners';
exports.listenersKey = listenersKey;

var initState = function initState(state) {
  return state;
};

exports.initState = initState;
var current = 'current';

var fieldReducer = function fieldReducer(state, _ref) {
  var _handlers;

  var type = _ref.type,
      _ref$fieldName = _ref.fieldName,
      fieldName = _ref$fieldName === void 0 ? '' : _ref$fieldName,
      payload = _ref.payload;
  var fieldPath = getFieldPath(fieldName);
  var handlers = (_handlers = {}, (0, _defineProperty2.default)(_handlers, actionTypes.updateValue, function (value) {
    setTimeout(function () {
      var listenerFieldKey = fieldName.replace(/items\.[\d]+\.fields/, '').replace(/\.\./, '.');
      var previous = state.getIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'value']), '');
      state.getIn([listenersKey, listenerFieldKey], (0, _immutable.List)()).forEach(function (listener) {
        return listener(value, previous, state.get('formTools').current);
      });
    });
    var newState = state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'value']), value).setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'pristine']), value == state.getIn([fieldsKey, fieldName, 'initial', 'value']));
    setTimeout(function () {
      var onFormChange = state.get('onFormChange');

      if (onFormChange && typeof onFormChange === 'function') {
        onFormChange((0, _mergeFormValues.mergeFormValues)(newState, (0, _immutable.Map)()));
      }
    });
    return newState;
  }), (0, _defineProperty2.default)(_handlers, actionTypes.updateList, function (items) {
    var newState = state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['items']), items).setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'pristine']), false);
    return newState;
  }), (0, _defineProperty2.default)(_handlers, actionTypes.touched, function () {
    return state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'touched']), true);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.validationResult, function (_ref2) {
    var error = _ref2.error,
        helperText = _ref2.helperText;
    return state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'error']), error).setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), [current, 'helperText']), helperText || state.getIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['initial', 'field'])).helperText);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.validateAll, function (errors) {
    return (0, _mergeValidationResults.mergeValidationResults)(state, errors, true);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.insertField, function (fieldState) {
    return state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath)), fieldState).deleteIn([removedFieldsKey, state.get(removedFieldsKey, (0, _immutable.List)()).indexOf(fieldName)]);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.removeField, function () {
    return state.deleteIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath))).set(removedFieldsKey, state.get(removedFieldsKey, (0, _immutable.List)()).push(fieldName));
  }), (0, _defineProperty2.default)(_handlers, actionTypes.addListItem, function (itemState) {
    var path = [fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['items']);
    return state.updateIn((0, _toConsumableArray2.default)(path), (0, _immutable.List)(), function (prevState) {
      return prevState.push(itemState);
    });
  }), (0, _defineProperty2.default)(_handlers, actionTypes.removeListItem, function (index) {
    return (0, _syncListIndexes.syncListIndexes)(state.deleteIn([fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['items', index])), fieldsKey, fieldPath);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.updateListIndex, function (_ref3) {
    var fromIndex = _ref3.fromIndex,
        toIndex = _ref3.toIndex;
    var path = [fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['items']);
    var item = state.getIn((0, _toConsumableArray2.default)(path).concat([fromIndex]));
    return (0, _syncListIndexes.syncListIndexes)(state.deleteIn((0, _toConsumableArray2.default)(path).concat([fromIndex])).updateIn(path, function (items) {
      return items.insert(toIndex, item);
    }), fieldsKey, fieldPath);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.addListener, function (listener) {
    return state.updateIn([listenersKey, fieldName], (0, _immutable.List)(), function (listeners) {
      return listeners.push(listener);
    });
  }), (0, _defineProperty2.default)(_handlers, actionTypes.removeListener, function (listener) {
    return state.updateIn([listenersKey, fieldName], (0, _immutable.List)(), function (listeners) {
      var index = listeners.indexOf(listener);
      return index > -1 ? listeners.delete(index) : listeners;
    });
  }), (0, _defineProperty2.default)(_handlers, actionTypes.updateFieldDefinition, function (_ref4) {
    var definition = _ref4.definition,
        options = _ref4.options;
    var path = [fieldsKey].concat((0, _toConsumableArray2.default)(fieldPath), ['initial']);
    var initialDef = state.getIn((0, _toConsumableArray2.default)(path).concat(['field']), {});
    var update = (0, _immutable.Map)({
      optional: state.getIn((0, _toConsumableArray2.default)(path).concat(['optional']))
    });
    if (definition.optional !== undefined) update = update.set('optional', definition.optional);
    update = update.set('label', (0, _resolveLabel.resolveLabel)((0, _objectSpread2.default)({}, initialDef, definition), options));
    return state.mergeIn(path, update);
  }), (0, _defineProperty2.default)(_handlers, actionTypes.reset, function (state) {
    return state;
  }), _handlers);
  var handler = handlers[type];

  if (handler) {
    var lastPath = fieldPath;

    if (!areArraysEqual(state.get('lastPath', []), lastPath)) {
      lastPath = [];
    }

    var trackLastPath = type !== actionTypes.validationResult && type !== actionTypes.reset;
    return handler(payload).set('lastPath', trackLastPath ? lastPath : []);
  }

  return state;
};

exports.fieldReducer = fieldReducer;

var getFieldPath = function getFieldPath(fieldName) {
  var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var fieldPath = [fieldName];
  var match = fieldName.match(/.items.(\d+)./);

  if (match) {
    var firstField = fieldName.substr(0, match.index);
    var rest = fieldName.match(/.items.\d+.fields.(.*)$/)[1];

    if (rest.match(/.items.(\d+)./)) {
      return getFieldPath(rest, [firstField, 'items', match[1], 'fields']);
    }

    fieldPath = (0, _toConsumableArray2.default)(prev).concat([firstField, 'items', match[1], 'fields', rest]);
  }

  return fieldPath;
};

exports.getFieldPath = getFieldPath;

var areArraysEqual = function areArraysEqual(a, b) {
  if (a.length !== b.length) return false;
  var same = true;

  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      same = false;
    }
  }

  return same;
};