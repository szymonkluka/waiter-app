"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.syncListIndexes = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var syncListIndexes = function syncListIndexes(state, fieldsKey, path) {
  var items = recurseSyncListIndexes(state.getIn([fieldsKey].concat((0, _toConsumableArray2.default)(path), ['items'])), path);
  return state.setIn([fieldsKey].concat((0, _toConsumableArray2.default)(path), ['items']), items);
};

exports.syncListIndexes = syncListIndexes;

var recurseSyncListIndexes = function recurseSyncListIndexes(items, path) {
  return items.map(function (item, index) {
    var fieldKeys = item.get('fields').keySeq();
    var temp = item;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = fieldKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;
        temp = temp.setIn(['fields', key, 'initial', 'field', 'name'], "".concat(path.join('.'), ".items.").concat(index, ".fields.").concat(key));
        var childPath = ['fields', key, 'items'];
        var childItems = temp.getIn(childPath);

        if (childItems) {
          childItems = recurseSyncListIndexes(childItems, (0, _toConsumableArray2.default)(path).concat(['items', index, 'fields', key]));
          temp = temp.setIn(childPath, childItems);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return temp;
  });
};