"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getInitialState = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _immutable = require("immutable");

var _fieldReducer = require("./fieldReducer");

var _getFieldState = require("./getFieldState");

/**
 * @param fields {Array<import("..").IFormFieldArgs>}
 */
var getInitialState = function getInitialState(fields) {
  var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _immutable.Map)();
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var formTools = arguments.length > 3 ? arguments[3] : undefined;
  var fieldMap = fields.reduce(function (acc, field) {
    var result = acc.set(field.name, (0, _getFieldState.getFieldState)(field, initialValues, options));
    return result;
  }, (0, _immutable.Map)());
  var listeners = getListeners(options.listeners);
  var withFormChange = options.onFormChange ? (0, _immutable.fromJS)({
    onFormChange: options.onFormChange
  }) : (0, _immutable.Map)();
  return (0, _immutable.fromJS)((0, _defineProperty2.default)({}, _fieldReducer.fieldsKey, fieldMap)).merge(listeners).merge(withFormChange).set('formTools', formTools);
};

exports.getInitialState = getInitialState;

var getListeners = function getListeners() {
  var listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return Object.entries(listeners).reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        fieldName = _ref2[0],
        value = _ref2[1];

    return acc.updateIn([_fieldReducer.listenersKey, fieldName], (0, _immutable.List)(), function (current) {
      return Array.isArray(value) ? current.concat(value) : current.push(value);
    });
  }, (0, _immutable.Map)());
};