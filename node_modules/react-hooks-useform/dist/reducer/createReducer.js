"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReducer = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _immutable = require("immutable");

var _react = require("react");

var _fieldReducer = require("./fieldReducer");

var _getInitialState = require("./getInitialState");

var createReducer = function createReducer(_ref) {
  var fields = _ref.fields,
      _ref$initialValues = _ref.initialValues,
      initialValues = _ref$initialValues === void 0 ? (0, _immutable.Map)() : _ref$initialValues,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? {} : _ref$options,
      formTools = _ref.formTools;

  var calcInitialState = function calcInitialState() {
    return (0, _getInitialState.getInitialState)(fields, initialValues, options, formTools);
  };

  var _useReducer = (0, _react.useReducer)(_fieldReducer.fieldReducer, (0, _immutable.Map)(), function () {
    return calcInitialState();
  }),
      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  var hashCodeRef = (0, _react.useRef)();
  (0, _react.useMemo)(function () {
    if (!hashCodeRef.current) {
      hashCodeRef.current = initialValues.hashCode();
      setTimeout(function () {
        options.initialized && options.initialized((0, _objectSpread2.default)({
          initialValues: initialValues
        }, formTools.current));
      });
      return;
    }

    hashCodeRef.current = initialValues.hashCode();
    setTimeout(function () {
      dispatch(_fieldReducer.actions.reset(calcInitialState()));
      options.initialized && options.initialized((0, _objectSpread2.default)({
        initialValues: initialValues
      }, formTools.current));
    });
  }, [initialValues.hashCode()]);
  return [state, dispatch];
};

exports.createReducer = createReducer;