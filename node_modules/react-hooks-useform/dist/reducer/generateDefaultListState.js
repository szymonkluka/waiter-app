"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFields = exports.getCurrentValues = exports.generateDefaultListState = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _immutable = require("immutable");

var _resolveInitialFieldValue = require("./resolveInitialFieldValue");

var _resolveLabel = require("./resolveLabel");

var _getFieldState = require("./getFieldState");

/**
 *
 * @param field {import("..").IFormFieldArgs}
 * @param {*} initialValues
 * @param options {import("..").IFormOptions}
 */
var generateDefaultListState = function generateDefaultListState(field, initialValues) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var parentPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  // const applicablePath = parentPath ? `${parentPath}.${field.name}` : field.name
  var label = (0, _resolveLabel.resolveLabel)(field, options);
  var listValues = (0, _resolveInitialFieldValue.resolveInitialFieldValue)(field.value, initialValues.getIn(field.name.split('.')), field.type);
  var items = getCurrentValues(field.fields, listValues, options, field.name, parentPath);
  return (0, _immutable.fromJS)({
    initial: {
      type: field.type,
      optional: field.optional || false,
      label: label
    },
    current: {
      helperText: field.helperText || '',
      error: false,
      pristine: true,
      touched: false
    },
    items: items
  }).setIn(['initial', 'field'], field).setIn(['initial', 'options'], options);
};

exports.generateDefaultListState = generateDefaultListState;

var getCurrentValues = function getCurrentValues() {
  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var initialListValues = arguments.length > 1 ? arguments[1] : undefined;
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var fieldPath = arguments.length > 3 ? arguments[3] : undefined;
  var parentPath = arguments.length > 4 ? arguments[4] : undefined;
  return (initialListValues || (0, _immutable.List)()).map(function (item, index) {
    return getFields(fields, item, options, fieldPath, index, parentPath);
  });
};

exports.getCurrentValues = getCurrentValues;

var getFields = function getFields() {
  var fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _immutable.Map)();
  var options = arguments.length > 2 ? arguments[2] : undefined;
  var fieldPath = arguments.length > 3 ? arguments[3] : undefined;
  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var parentPath = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
  return (0, _immutable.Map)([['fields', fields.reduce(function (acc, field) {
    var pathName = "".concat(fieldPath, ".items.").concat(index, ".fields");
    if (parentPath) pathName = "".concat(parentPath, ".").concat(pathName);
    return acc.set(field.name, (0, _getFieldState.getFieldState)(field, value, options, pathName)).setIn([field.name, 'initial', 'field'], (0, _objectSpread2.default)({}, field, {
      name: "".concat(pathName, ".").concat(field.name)
    }));
  }, (0, _immutable.Map)())]]);
};

exports.getFields = getFields;