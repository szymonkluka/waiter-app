"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateFields = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _immutable = require("immutable");

var _prepareNameForValidate = require("../fields/prepareNameForValidate");

var getListValues = function getListValues(items) {
  return items.map(function (item) {
    return item.get('fields').entrySeq().reduce(function (acc, _ref) {
      var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
          key = _ref2[0],
          value = _ref2[1];

      return acc.set(key, value.getIn(['current', 'value']));
    }, (0, _immutable.Map)());
  });
};

var validateItems = function validateItems(items, getAllValues) {
  return items.map(function (item) {
    return validateMap(item.get('fields'), getAllValues);
  }).toArray();
};

var validateMap = function validateMap(fields, getAllValues) {
  return fields.entrySeq().reduce(function (acc, _ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        key = _ref4[0],
        field = _ref4[1];

    var value = field.getIn(['current', 'value']);
    var optional = field.getIn(['initial', 'optional'], false);

    var _field$getIn = field.getIn(['initial', 'field'], {}),
        validate = _field$getIn.validate,
        requiredMessage = _field$getIn.requiredMessage,
        name = _field$getIn.name;

    var items = field.get('items');

    if (items) {
      acc[key] = validateItems(items, getAllValues);

      if (!optional && items.size === 0) {
        acc[key].error = requiredMessage || 'Required';
      }

      if (validate) {
        var error = validate(getListValues(items), (0, _prepareNameForValidate.prepareNameForValidate)(name), getAllValues);

        if (error) {
          acc[key].error = error;
        }
      }

      return acc;
    }

    if (validate) {
      var _error = validate(value, (0, _prepareNameForValidate.prepareNameForValidate)(name), getAllValues);

      if (_error) {
        acc[key] = _error;
        return acc;
      }
    }

    if (!optional && (value === undefined || value === '')) {
      acc[key] = requiredMessage || 'Required';
    }

    return acc;
  }, {});
};

var validateFields = function validateFields(state, getAllValues) {
  return validateMap(state.get('fields'), getAllValues);
};

exports.validateFields = validateFields;