"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useForm = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _immutable = require("immutable");

var _Form = _interopRequireDefault(require("./Form"));

var _createReducer3 = require("./reducer/createReducer");

var _getFieldState = require("./reducer/getFieldState");

var _fieldReducer = require("./reducer/fieldReducer");

var _getInitialState = require("./reducer/getInitialState");

var _resolveFieldData = require("./resolveFieldData");

var _mergeFormValues = require("./helpers/mergeFormValues");

var _getFieldValues = require("./helpers/getFieldValues");

var _formStateResolvers = require("./formStateResolvers");

var _setPropsAtPath = require("./helpers/setPropsAtPath");

var _validateAll = require("./validate/validateAll");

var _getHasError = require("./validate/getHasError");

var _pruneNonErrors = require("./validate/pruneNonErrors");

/**
 * @param  param0 { import("./useForm").IFormProps }
 */
var useForm = function useForm(_ref) {
  var fields = _ref.fields,
      submit = _ref.submit,
      validate = _ref.validate,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? {} : _ref$options,
      _ref$initialValues = _ref.initialValues,
      initialValues = _ref$initialValues === void 0 ? (0, _immutable.Map)() : _ref$initialValues;
  var formTools = (0, _react.useRef)();

  var _createReducer = (0, _createReducer3.createReducer)({
    fields: fields,
    initialValues: initialValues,
    options: options,
    formTools: formTools
  }),
      _createReducer2 = (0, _slicedToArray2.default)(_createReducer, 2),
      state = _createReducer2[0],
      dispatch = _createReducer2[1];

  var fieldCache = (0, _react.useRef)();
  var fieldData;
  var lastPath = state.get('lastPath');

  var getAllValues = function getAllValues() {
    return (0, _immutable.fromJS)((0, _getFieldValues.getFieldValues)(fieldCache.current));
  };

  var t0 = performance.now();

  if (!lastPath || lastPath.length === 0 || lastPath[0] === '') {
    fieldData = (0, _resolveFieldData.resolveFieldData)(state, dispatch, getAllValues, options);
  } else {
    var path = [_fieldReducer.fieldsKey].concat((0, _toConsumableArray2.default)(lastPath));
    var props = (0, _resolveFieldData.resolveField)(state.getIn(path), dispatch, getAllValues);
    fieldData = fieldCache.current;
    (0, _setPropsAtPath.setPropsAtPath)(fieldData, props, lastPath);
  }

  if (options.logPerformance) {
    console.log('Perf:resolveFieldData', performance.now() - t0);
  }

  fieldCache.current = fieldData;
  var stateResolvers = (0, _formStateResolvers.formStateResolvers)(state);

  var addField = function addField(field) {
    var fieldState = (0, _getFieldState.getFieldState)(field, initialValues, options);
    dispatch(_fieldReducer.actions.insertField(field.name, fieldState));
  };

  var removeField = function removeField(fieldName) {
    dispatch(_fieldReducer.actions.removeField(fieldName));
  };

  var addFieldListener = function addFieldListener(fieldName, listener) {
    dispatch(_fieldReducer.actions.addListener(fieldName, listener));
  };

  var removeFieldListener = function removeFieldListener(fieldName, listener) {
    dispatch(_fieldReducer.actions.removeListener(fieldName, listener));
  };

  var getValidationResult = function getValidationResult() {
    var errors = (0, _validateAll.validateAll)(state, fieldData, validate, getAllValues);
    dispatch(_fieldReducer.actions.validateAll(errors));
    errors = (0, _pruneNonErrors.pruneNonErrors)(errors);
    return {
      isValid: Object.keys(errors).length === 0,
      errors: errors
    };
  };

  var trySubmitTheForm = function trySubmitTheForm() {
    var skipValidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var canSkip = false;
    var canSubmit;

    if (typeof skipValidation === 'boolean') {
      canSkip = skipValidation;
    }

    if (canSkip) {
      canSubmit = true;
    } else {
      var errors = (0, _validateAll.validateAll)(state, fieldData, validate, getAllValues);
      canSubmit = !(0, _getHasError.getHasError)(errors);
      dispatch(_fieldReducer.actions.validateAll(errors));
    }

    if (canSubmit && submit) {
      submit((0, _mergeFormValues.mergeFormValues)(state, initialValues));
    }
  };

  var getValuesIfFormValid = function getValuesIfFormValid() {
    var errors = (0, _validateAll.validateAll)(state, fieldData, validate, getAllValues);

    if (!(0, _getHasError.getHasError)(errors)) {
      return (0, _mergeFormValues.mergeFormValues)(state, initialValues);
    }

    return null;
  };

  var resetForm = function resetForm() {
    var derivedInitialState = (0, _getInitialState.getInitialState)(fields, initialValues, options, formTools);
    dispatch(_fieldReducer.actions.reset(derivedInitialState));
  };

  var setValue = function setValue(fieldName, value) {
    fieldData[fieldName].setValue(value);
  };

  var getValues = function getValues() {
    return (0, _mergeFormValues.mergeFormValues)(state, initialValues);
  };

  var updateFieldDefinition = function updateFieldDefinition(fieldName, definition) {
    dispatch(_fieldReducer.actions.updateFieldDefinition(fieldName, {
      definition: (0, _objectSpread2.default)({
        name: fieldName
      }, definition),
      options: options
    }));
  };

  var fieldProps = (0, _resolveFieldData.getFieldProps)(fieldData, state, options.id);
  formTools.current = {
    addField: addField,
    removeField: removeField,
    addFieldListener: addFieldListener,
    removeFieldListener: removeFieldListener,
    setValue: setValue,
    getValues: getValues,
    getFields: function getFields() {
      return fieldProps;
    },
    updateFieldDefinition: updateFieldDefinition
  };
  return [(0, _objectSpread2.default)({}, fieldProps), (0, _objectSpread2.default)({
    setValue: setValue,
    getValuesIfFormValid: getValuesIfFormValid,
    submit: trySubmitTheForm,
    validate: getValidationResult,
    reset: resetForm,
    id: options.id || '',
    Form: _Form.default,
    addField: addField,
    removeField: removeField,
    addFieldListener: addFieldListener,
    removeFieldListener: removeFieldListener
  }, stateResolvers, {
    getValues: getValues,
    updateFieldDefinition: updateFieldDefinition
  })];
};

exports.useForm = useForm;