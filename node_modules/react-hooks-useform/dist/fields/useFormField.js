"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFormField = void 0;

var _fieldReducer = require("../reducer/fieldReducer");

var _prepareNameForValidate = require("./prepareNameForValidate");

/**
 * @param  fieldArgs { import("../useForm").IFormFieldArgs}
 * @returns {import("../useForm").IFormField}
 */
var useFormField = function useFormField(state, dispatch) {
  var fieldArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var requiredMessage = fieldArgs.requiredMessage || 'Required';

  var validate = function validate(value) {
    var touched = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var result;

    if (value !== '' && value !== undefined && fieldArgs.validate) {
      result = fieldArgs.validate(value, (0, _prepareNameForValidate.prepareNameForValidate)(fieldArgs.name), state.get('getAllValues'));
    }

    if (!Boolean(result) && !fieldArgs.optional && touched && value === '') {
      result = requiredMessage;
    }

    if (touched || !Boolean(result) && state.getIn(['current', 'helperText'])) {
      dispatch(_fieldReducer.actions.validationResult(fieldArgs.name, Boolean(result), result));
    }

    return result;
  };

  var setValue = function setValue(v) {
    dispatch(_fieldReducer.actions.updateValue(fieldArgs.name, v));
    validate(v, state.getIn(['current', 'touched']));
  };

  var onChange = function onChange(event) {
    var value = fieldArgs.valueFromChange ? fieldArgs.valueFromChange(event) : event.target.value;
    var coercedValue = fieldArgs.normalize ? fieldArgs.normalize(value) : value;
    setValue(coercedValue);
  };

  var onBlur = function onBlur() {
    dispatch(_fieldReducer.actions.touched(fieldArgs.name));
    validate(state.getIn(['current', 'value']), true);
  };

  return {
    props: {
      error: state.getIn(['current', 'error']),
      helperText: state.getIn(['current', 'helperText']),
      label: state.getIn(['initial', 'label']),
      value: state.getIn(['current', 'value']),
      // handlers
      onBlur: onBlur,
      onChange: onChange
    },
    meta: {
      touched: state.getIn(['current', 'touched']),
      pristine: state.getIn(['current', 'pristine'])
    },
    setValue: setValue
  };
};

exports.useFormField = useFormField;