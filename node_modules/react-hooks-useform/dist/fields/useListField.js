"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultListValue = exports.useListField = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _immutable = require("immutable");

var _fieldReducer = require("../reducer/fieldReducer");

var _resolveFieldData = require("../resolveFieldData");

var _generateDefaultListState = require("../reducer/generateDefaultListState");

var _prepareNameForValidate = require("./prepareNameForValidate");

var _getId = require("../helpers/getId");

/**
 * @param  fieldArgs { import("../useForm").IFormFieldArgs}
 * @returns {import("../useForm").IFormField}
 */
var useListField = function useListField(state, dispatch) {
  var fieldArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var getAllValues = arguments.length > 3 ? arguments[3] : undefined;
  var formOptions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var requiredMessage = fieldArgs.requiredMessage || 'Required';

  var setValue = function setValue(value) {
    var s = (0, _generateDefaultListState.generateDefaultListState)(fieldArgs, (0, _immutable.Map)().setIn(fieldArgs.name.split('.'), value), formOptions);
    dispatch(_fieldReducer.actions.updateList(fieldArgs.name, s.get('items')));
    validate(s.get('items'));
  };

  var validate = function validate(items) {
    var message;

    if (fieldArgs.validate) {
      message = fieldArgs.validate(items, (0, _prepareNameForValidate.prepareNameForValidate)(fieldArgs.name), state.get('getAllValues'));
    }

    if (!message && items.size === 0 && !fieldArgs.optional) {
      message = requiredMessage;
    }

    dispatch(_fieldReducer.actions.validationResult(fieldArgs.name, Boolean(message), message || ''));
  };

  var add = function add() {
    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _immutable.Map)();
    var options = state.getIn(['initial', 'options']);
    var field = state.getIn(['initial', 'field']);
    var items = state.get('items', (0, _immutable.List)());
    var itemState = (0, _generateDefaultListState.getFields)(field.fields, item, options, fieldArgs.name, items.size);
    dispatch(_fieldReducer.actions.addListItem(fieldArgs.name, itemState));
    validate(items.push(item));
  };

  var remove = function remove(index) {
    var items = state.get('items', (0, _immutable.List)());
    dispatch(_fieldReducer.actions.removeListItem(fieldArgs.name, index));
    validate(items.remove(index));
  };

  var updateIndex = function updateIndex(fromIndex, toIndex) {
    dispatch(_fieldReducer.actions.updateListIndex(fieldArgs.name, fromIndex, toIndex));
  };

  var fieldData = state.getIn(['items'], (0, _immutable.List)()).map(function (item) {
    return (0, _resolveFieldData.resolveFieldData)(item, dispatch, getAllValues, formOptions);
  }).toArray();
  var id = (0, _getId.getId)(formOptions.id, fieldArgs.name);
  return {
    props: {
      id: id,
      error: state.getIn(['current', 'error']),
      helperText: state.getIn(['current', 'helperText']),
      label: state.getIn(['initial', 'label']),
      items: fieldData.map(function (item, index) {
        var key = "".concat(fieldArgs.name, ".").concat(index);
        return (0, _objectSpread2.default)({}, (0, _resolveFieldData.getFieldProps)(item, state.getIn(['items', index]), (0, _getId.getId)(formOptions.id, key)), {
          key: key
        });
      }),
      add: add,
      remove: remove,
      updateIndex: updateIndex
    },
    setValue: setValue
  };
};

exports.useListField = useListField;
var defaultListValue = (0, _immutable.List)();
exports.defaultListValue = defaultListValue;