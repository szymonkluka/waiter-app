"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFieldProps = exports.resolveField = exports.resolveFieldData = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _immutable = require("immutable");

var _fieldReducer = require("./reducer/fieldReducer");

var _fields = require("./fields");

var _getId = require("./helpers/getId");

var resolveFieldData = function resolveFieldData(state, dispatch, getAllValues, formOptions) {
  var fieldData = state.get(_fieldReducer.fieldsKey, (0, _immutable.Map)()).entrySeq().reduce(function (acc, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        fieldName = _ref2[0],
        current = _ref2[1];

    var fieldState = current.set('getAllValues', getAllValues);
    acc[fieldName] = resolveField(fieldState, dispatch, getAllValues, formOptions);
    return acc;
  }, {});
  return fieldData;
};

exports.resolveFieldData = resolveFieldData;

var resolveField = function resolveField(fieldState, dispatch, getAllValues, formOptions) {
  var field = fieldState.getIn(['initial', 'field']);
  var fieldType = fieldState.getIn(['initial', 'type']);

  switch (fieldType) {
    case 'select':
      return (0, _fields.useSelectField)(fieldState, dispatch, field);

    case 'boolean':
      return (0, _fields.useBooleanField)(fieldState, dispatch, field);

    case 'number':
      return (0, _fields.useNumberField)(fieldState, dispatch, field);

    case 'list':
      return (0, _fields.useListField)(fieldState, dispatch, field, getAllValues, formOptions);

    case 'object':
      return (0, _fields.useObjectField)(fieldState, dispatch, field);

    case 'text':
    default:
      return (0, _fields.useTextField)(fieldState, dispatch, field);
  }
};

exports.resolveField = resolveField;

var getFieldProps = function getFieldProps(fieldData) {
  var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _immutable.Map)();
  var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return Object.entries(fieldData).reduce(function (acc, _ref3) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
        key = _ref4[0],
        v = _ref4[1];

    var passThrough = state.getIn([_fieldReducer.fieldsKey, key, 'initial', 'field'], {}).passThrough || {};
    acc[key] = (0, _objectSpread2.default)({
      id: (0, _getId.getId)(parentKey, key)
    }, v.props, passThrough);
    return acc;
  }, {});
};

exports.getFieldProps = getFieldProps;