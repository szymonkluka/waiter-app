{"ast":null,"code":"import { API_URL } from '../config';\nexport const getAllPosts = _ref => {\n  let {\n    posts\n  } = _ref;\n  return posts;\n};\nexport const getPostById = (_ref2, id) => {\n  let {\n    posts\n  } = _ref2;\n  return posts.find(post => post.id === postsId);\n};\nexport const getPostsByCategory = (_ref3, category) => {\n  let {\n    posts\n  } = _ref3;\n  return posts.filter(post => post.category === category);\n};\nexport const deletePost = payload => ({\n  type: DELETE_POST,\n  payload\n});\nexport const addPost = payload => ({\n  type: ADD_POST,\n  payload\n});\nexport const editPost = payload => ({\n  type: EDIT_POST,\n  payload\n});\nexport const getData = payload => ({\n  type: GET_DATA,\n  payload\n});\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST');\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\nconst GET_DATA = createActionName('GET_DATA');\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch(changeStatus(true));\n    fetch(`${API_URL}/posts`).then(response => response.json()).then(data => dispatch(getData(data)));\n  };\n};\nconst createActionNames = action => {\n  return `app/status/${action}`;\n};\nconst CHANGE_STATUS = createActionNames('CHANGE_STATUS');\nconst EDIT_TABLE = createActionNames('EDIT_TABLE');\nexport const editTable = payload => ({\n  type: EDIT_TABLE,\n  payload\n});\nexport const editTableRequest = editedTable => {\n  return dispatch => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(editedTable)\n    };\n    fetch(`${API_URL}/tables/${editedTable.id}`, options).then(response => response.json()).then(data => dispatch(editTable(data)));\n  };\n};\n\n//selectors\n\n// actions\n\nexport const changeStatus = payload => ({\n  type: CHANGE_STATUS,\n  payload\n});\n\n// reducer\nexport const postsReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_DATA:\n      return [...action.payload];\n    case CHANGE_STATUS:\n      {\n        return action.payload;\n      }\n    case EDIT_POST:\n      return statePart.map(post => post.id === action.payload.id ? {\n        ...post,\n        ...action.payload\n      } : post);\n    default:\n      return statePart;\n  }\n};","map":{"version":3,"names":["API_URL","getAllPosts","_ref","posts","getPostById","_ref2","id","find","post","postsId","getPostsByCategory","_ref3","category","filter","deletePost","payload","type","DELETE_POST","addPost","ADD_POST","editPost","EDIT_POST","getData","GET_DATA","createActionName","actionName","fetchData","dispatch","changeStatus","fetch","then","response","json","data","createActionNames","action","CHANGE_STATUS","EDIT_TABLE","editTable","editTableRequest","editedTable","options","method","headers","body","JSON","stringify","postsReducer","statePart","arguments","length","undefined","map"],"sources":["C:/Users/lenov/Downloads/kodilla-waiter-app-master (1)/kodilla-waiter-app-master/src/redux/tablesReducer.js"],"sourcesContent":["import { API_URL } from '../config';\n\nexport const getAllPosts = ({ posts }) => posts;\nexport const getPostById = ({ posts }, id) => posts.find(post => post.id === postsId);\nexport const getPostsByCategory = ({ posts }, category) => posts.filter(post => post.category === category);\n\nexport const deletePost = payload => ({ type: DELETE_POST, payload })\nexport const addPost = payload => ({ type: ADD_POST, payload });\nexport const editPost = payload => ({ type: EDIT_POST, payload });\nexport const getData = (payload) => ({ type: GET_DATA, payload });\n\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST')\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\nconst GET_DATA = createActionName('GET_DATA');\n\nexport const fetchData = () => {\n  return (dispatch) => {\n    dispatch(changeStatus(true));\n    fetch(`${API_URL}/posts`)\n      .then((response) => response.json())\n      .then((data) => dispatch(getData(data)))\n\n  };\n};\n\n\nconst createActionNames = (action) => {\n  return `app/status/${action}`;\n};\n\nconst CHANGE_STATUS = createActionNames('CHANGE_STATUS');\n\nconst EDIT_TABLE = createActionNames('EDIT_TABLE');\n\nexport const editTable = (payload) => ({ type: EDIT_TABLE, payload })\n\nexport const editTableRequest = (editedTable) => {\n  return (dispatch) => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(editedTable),\n    };\n\n    fetch(`${API_URL}/tables/${editedTable.id}`, options)\n      .then((response) => response.json())\n      .then((data) => dispatch(editTable(data)));\n  };\n};\n\n//selectors\n\n\n// actions\n\nexport const changeStatus = (payload) => ({ type: CHANGE_STATUS, payload });\n\n\n\n// reducer\nexport const postsReducer = (statePart = [], action) => {\n  switch (action.type) {\n    case GET_DATA:\n      return [...action.payload];\n    case CHANGE_STATUS: {\n      return action.payload;\n    }\n    case EDIT_POST:\n      return statePart.map(post => (post.id === action.payload.id) ? { ...post, ...action.payload } : post);\n    default:\n      return statePart;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}