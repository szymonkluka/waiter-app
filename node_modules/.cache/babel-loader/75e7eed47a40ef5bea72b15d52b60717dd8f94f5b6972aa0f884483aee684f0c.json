{"ast":null,"code":"import shortid from 'shortid';\nimport { API_URL } from '../config';\nexport const getAllPosts = _ref => {\n  let {\n    posts\n  } = _ref;\n  return posts;\n};\nexport const getPostById = (_ref2, id) => {\n  let {\n    posts\n  } = _ref2;\n  return posts.find(post => post.id === id);\n};\nexport const getPostsByCategory = (_ref3, category) => {\n  let {\n    posts\n  } = _ref3;\n  return posts.filter(post => post.category === category);\n};\nexport const deletePost = payload => ({\n  type: DELETE_POST,\n  payload\n});\nexport const addPost = payload => ({\n  type: ADD_POST,\n  payload\n});\nexport const editPost = payload => ({\n  type: EDIT_POST,\n  payload\n});\nexport const getData = payload => ({\n  type: GET_DATA,\n  payload\n});\nexport const editData = payload => ({\n  type: EDIT_TABLE,\n  payload\n});\nexport const changeStatus = payload => ({\n  type: CHANGE_STATUS,\n  payload\n});\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST');\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\nconst GET_DATA = createActionName('GET_DATA');\nexport const fetchData = () => {\n  return dispatch => {\n    dispatch(changeStatus);\n    fetch(`${API_URL}/posts`).then(response => response.json()).then(data => dispatch(getData(data)));\n  };\n};\nexport const postsReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case EDIT_TABLE:\n      return statePart.map(post => {\n        if (post.id === action.payload.id) {\n          return {\n            ...post,\n            ...action.payload\n          };\n        } else {\n          return post;\n        }\n      });\n    case DELETE_POST:\n      return statePart.filter(post => post.id !== action.payload);\n    case ADD_POST:\n      return [...statePart, {\n        ...action.payload,\n        id: shortid()\n      }];\n    case EDIT_POST:\n      return statePart.map(post => post.id === action.payload.id ? {\n        ...post,\n        ...action.payload\n      } : post);\n    case GET_DATA:\n      return [...action.payload];\n    case CHANGE_STATUS:\n      {\n        return action.payload;\n      }\n    default:\n      return statePart;\n  }\n};\nconst createActionNames = action => {\n  return `app/status/${action}`;\n};\nconst CHANGE_STATUS = createActionNames('CHANGE_STATUS');\nconst EDIT_TABLE = createActionNames('EDIT_TABLE');\nexport const editDataRequest = editedTable => {\n  return dispatch => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(editedTable)\n    };\n    fetch(`${API_URL}/posts/${editedTable.id}`, options).then(response => response.json()).then(data => dispatch(editData(data)));\n  };\n};\n\n// reducer","map":{"version":3,"names":["shortid","API_URL","getAllPosts","_ref","posts","getPostById","_ref2","id","find","post","getPostsByCategory","_ref3","category","filter","deletePost","payload","type","DELETE_POST","addPost","ADD_POST","editPost","EDIT_POST","getData","GET_DATA","editData","EDIT_TABLE","changeStatus","CHANGE_STATUS","createActionName","actionName","fetchData","dispatch","fetch","then","response","json","data","postsReducer","statePart","arguments","length","undefined","action","map","createActionNames","editDataRequest","editedTable","options","method","headers","body","JSON","stringify"],"sources":["C:/Users/lenov/Desktop/waiter-app/src/redux/postsRedux.js"],"sourcesContent":["import shortid from 'shortid';\nimport { API_URL } from '../config';\n\nexport const getAllPosts = ({ posts }) => posts;\nexport const getPostById = ({ posts }, id) => posts.find(post => post.id === id);\nexport const getPostsByCategory = ({ posts }, category) => posts.filter(post => post.category === category);\n\nexport const deletePost = payload => ({ type: DELETE_POST, payload })\nexport const addPost = payload => ({ type: ADD_POST, payload });\nexport const editPost = payload => ({ type: EDIT_POST, payload });\nexport const getData = (payload) => ({ type: GET_DATA, payload });\nexport const editData = (payload) => ({ type: EDIT_TABLE, payload })\nexport const changeStatus = (payload) => ({ type: CHANGE_STATUS, payload });\n\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST')\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\nconst GET_DATA = createActionName('GET_DATA');\n\nexport const fetchData = () => {\n  return (dispatch) => {\n    dispatch(changeStatus);\n    fetch(`${API_URL}/posts`)\n      .then((response) => response.json())\n      .then((data) => dispatch(getData(data)))\n  };\n};\n\nexport const postsReducer = (statePart = [], action) => {\n  switch (action.type) {\n    case EDIT_TABLE:\n      return statePart.map((post) => {\n        if (post.id === action.payload.id) {\n          return { ...post, ...action.payload };\n        } else {\n          return post;\n        }\n      });\n    case DELETE_POST:\n      return statePart.filter(post => post.id !== action.payload)\n    case ADD_POST:\n      return [...statePart, { ...action.payload, id: shortid() }];\n    case EDIT_POST:\n      return statePart.map(post => (post.id === action.payload.id) ? { ...post, ...action.payload } : post);\n    case GET_DATA:\n      return [...action.payload];\n    case CHANGE_STATUS: {\n      return action.payload;\n    }\n    default:\n      return statePart;\n  }\n};\n\nconst createActionNames = (action) => {\n  return `app/status/${action}`;\n};\n\nconst CHANGE_STATUS = createActionNames('CHANGE_STATUS');\nconst EDIT_TABLE = createActionNames('EDIT_TABLE');\n\nexport const editDataRequest = (editedTable) => {\n  return (dispatch) => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(editedTable),\n    };\n\n    fetch(`${API_URL}/posts/${editedTable.id}`, options)\n      .then((response) => response.json())\n      .then((data) => dispatch(editData(data)));\n  };\n};\n\n\n\n// reducer\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}