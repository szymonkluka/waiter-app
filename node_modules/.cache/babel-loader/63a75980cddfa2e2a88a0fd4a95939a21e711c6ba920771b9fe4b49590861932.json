{"ast":null,"code":"export const getAllTables = _ref => {\n  let {\n    tables\n  } = _ref;\n  return tables;\n};\nexport const getTableById = (_ref2, id) => {\n  let {\n    tables\n  } = _ref2;\n  return tables.find(table => table.id === id);\n};\nexport const getTables = payload => ({\n  type: GET_TABLES,\n  payload\n});\nexport const editedTables = payload => ({\n  type: EDIT_TABLES,\n  payload\n});\nconst createActionName = actionName => `app/tables/${actionName}`;\nconst GET_TABLES = createActionName('GET_TABLES');\nexport const fetchData = () => {\n  return dispatch => {\n    fetch('http://localhost:3131/tables').then(response => response.json()).then(data => dispatch(getTables(data)));\n  };\n};\nexport const tablesReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case EDIT_TABLES:\n      return statePart.map(table => table.id === action.payload.id ? {\n        ...table,\n        ...action.payload\n      } : table);\n    case GET_TABLES:\n      return [...action.payload];\n    default:\n      return statePart;\n  }\n};\nconst createActionNames = action => {\n  return `app/status/${action}`;\n};\nconst EDIT_TABLES = createActionNames('EDIT_DATA');\nexport const addChangedData = tables => {\n  return dispatch => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tables)\n    };\n    fetch('http://localhost:3131' / `${getAllTables}` / `${tables.id}`, options).then(response => response.json()).then(data => dispatch(editedTables(data)));\n  };\n};\n\n// reducer","map":{"version":3,"names":["getAllTables","_ref","tables","getTableById","_ref2","id","find","table","getTables","payload","type","GET_TABLES","editedTables","EDIT_TABLES","createActionName","actionName","fetchData","dispatch","fetch","then","response","json","data","tablesReducer","statePart","arguments","length","undefined","action","map","createActionNames","addChangedData","options","method","headers","body","JSON","stringify"],"sources":["C:/Users/lenov/Desktop/waiter-app/src/redux/postsRedux.js"],"sourcesContent":["export const getAllTables = ({ tables }) => tables;\nexport const getTableById = ({ tables }, id) => tables.find(table => table.id === id);\n\n\nexport const getTables = payload => ({ type: GET_TABLES, payload });\nexport const editedTables = payload => ({ type: EDIT_TABLES, payload })\n\nconst createActionName = actionName => `app/tables/${actionName}`;\n\n\nconst GET_TABLES = createActionName('GET_TABLES');\n\nexport const fetchData = () => {\n  return (dispatch) => {\n    fetch('http://localhost:3131/tables')\n      .then((response) => response.json())\n      .then((data) => dispatch(getTables(data)));\n  };\n};\n\nexport const tablesReducer = (statePart = [], action) => {\n  switch (action.type) {\n    case EDIT_TABLES:\n      return statePart.map(table => (table.id === action.payload.id) ? { ...table, ...action.payload } : table);\n    case GET_TABLES:\n      return [...action.payload];\n    default:\n      return statePart;\n  }\n};\n\nconst createActionNames = (action) => {\n  return `app/status/${action}`;\n};\n\nconst EDIT_TABLES = createActionNames('EDIT_DATA');\n\n\n\nexport const addChangedData = (tables) => {\n  return (dispatch) => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(tables)\n    };\n    fetch('http://localhost:3131' / `${getAllTables}` / `${tables.id}`, options)\n      .then((response) => response.json())\n      .then((data) => dispatch(editedTables(data)));\n  };\n}\n\n\n\n\n\n\n// reducer\n\n"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAGC,IAAA;EAAA,IAAC;IAAEC;EAAO,CAAC,GAAAD,IAAA;EAAA,OAAKC,MAAM;AAAA;AAClD,OAAO,MAAMC,YAAY,GAAGA,CAAAC,KAAA,EAAaC,EAAE;EAAA,IAAd;IAAEH;EAAO,CAAC,GAAAE,KAAA;EAAA,OAASF,MAAM,CAACI,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACF,EAAE,KAAKA,EAAE,CAAC;AAAA;AAGrF,OAAO,MAAMG,SAAS,GAAGC,OAAO,KAAK;EAAEC,IAAI,EAAEC,UAAU;EAAEF;AAAQ,CAAC,CAAC;AACnE,OAAO,MAAMG,YAAY,GAAGH,OAAO,KAAK;EAAEC,IAAI,EAAEG,WAAW;EAAEJ;AAAQ,CAAC,CAAC;AAEvE,MAAMK,gBAAgB,GAAGC,UAAU,IAAK,cAAaA,UAAW,EAAC;AAGjE,MAAMJ,UAAU,GAAGG,gBAAgB,CAAC,YAAY,CAAC;AAEjD,OAAO,MAAME,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAQC,QAAQ,IAAK;IACnBC,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,QAAQ,CAACT,SAAS,CAACc,IAAI,CAAC,CAAC,CAAC;EAC9C,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,SAAAA,CAAA,EAA4B;EAAA,IAA3BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAClD,QAAQC,MAAM,CAAClB,IAAI;IACjB,KAAKG,WAAW;MACd,OAAOW,SAAS,CAACK,GAAG,CAACtB,KAAK,IAAKA,KAAK,CAACF,EAAE,KAAKuB,MAAM,CAACnB,OAAO,CAACJ,EAAE,GAAI;QAAE,GAAGE,KAAK;QAAE,GAAGqB,MAAM,CAACnB;MAAQ,CAAC,GAAGF,KAAK,CAAC;IAC3G,KAAKI,UAAU;MACb,OAAO,CAAC,GAAGiB,MAAM,CAACnB,OAAO,CAAC;IAC5B;MACE,OAAOe,SAAS;EAAC;AAEvB,CAAC;AAED,MAAMM,iBAAiB,GAAIF,MAAM,IAAK;EACpC,OAAQ,cAAaA,MAAO,EAAC;AAC/B,CAAC;AAED,MAAMf,WAAW,GAAGiB,iBAAiB,CAAC,WAAW,CAAC;AAIlD,OAAO,MAAMC,cAAc,GAAI7B,MAAM,IAAK;EACxC,OAAQe,QAAQ,IAAK;IACnB,MAAMe,OAAO,GAAG;MACdC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnC,MAAM;IAC7B,CAAC;IACDgB,KAAK,CAAC,uBAAuB,GAAI,GAAElB,YAAa,EAAC,GAAI,GAAEE,MAAM,CAACG,EAAG,EAAC,EAAE2B,OAAO,CAAC,CACzEb,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,QAAQ,CAACL,YAAY,CAACU,IAAI,CAAC,CAAC,CAAC;EACjD,CAAC;AACH,CAAC;;AAOD"},"metadata":{},"sourceType":"module","externalDependencies":[]}