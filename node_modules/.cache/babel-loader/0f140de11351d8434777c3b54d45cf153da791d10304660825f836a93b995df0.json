{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isDateObject = data => data instanceof Date;\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst HookFormContext = React.createContext(null);\nconst useFormContext = () => React.useContext(HookFormContext);\nconst FormProvider = props => React.createElement(HookFormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = function (formState, _proxyFormState, localProxyFormState) {\n  let isRoot = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  function createGetter(prop) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n  const result = {};\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key)\n    });\n  }\n  return result;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, _proxyFormState, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find(key => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar shouldSubscribeByName = (name, signalName) => !name || !signalName || name === signalName || convertToArrayPayload(name).some(currentName => currentName && (currentName.startsWith(signalName) || signalName.startsWith(currentName)));\nconst tearDown = _subscription => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\nconst updateSubscriptionProps = _ref => {\n  let {\n    _subscription,\n    _props\n  } = _ref;\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback\n    });\n  }\n};\nfunction useSubscribe(props) {\n  const _subscription = React.useRef();\n  const _props = React.useRef(props);\n  _props.current = props;\n  updateSubscriptionProps({\n    _subscription,\n    _props\n  });\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props\n    });\n    return () => tearDown(_subscription);\n  }, []);\n}\nfunction useFormState(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    disabled,\n    name\n  } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    callback: formState => shouldSubscribeByName(_name.current, formState.name) && shouldRenderFormState(formState, _localProxyFormState.current) && updateFormState(Object.assign(Object.assign({}, control._formState), formState)),\n    subject: control._subjects.state\n  });\n  return getProxyFormState(formState, control._proxyFormState, _localProxyFormState.current, false);\n}\nvar isString = value => typeof value === 'string';\nfunction generateWatchOutput(names, _names, formValues, isGlobal) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names);\n  }\n  if (isArray) {\n    return names.map(fieldName => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n  }\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\nfunction useWatch(props) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled\n  } = props || {};\n  const _name = React.useRef(name);\n  _name.current = name;\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: formState => {\n      if (shouldSubscribeByName(_name.current, formState.name)) {\n        const fieldValues = generateWatchOutput(_name.current, control._names, formState.values || control._formValues);\n        updateValue(isUndefined(_name.current) ? Object.assign({}, fieldValues) : Array.isArray(fieldValues) ? [...fieldValues] : fieldValues);\n      }\n    }\n  });\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? control._getWatch(name) : defaultValue);\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n  return value;\n}\nfunction useController(props) {\n  const methods = useFormContext();\n  const {\n    name,\n    control = methods.control,\n    shouldUnregister\n  } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue))\n  });\n  const formState = useFormState({\n    control,\n    name\n  });\n  const _name = React.useRef(name);\n  _name.current = name;\n  const registerProps = control.register(name, Object.assign(Object.assign({}, props.rules), {\n    value\n  }));\n  React.useEffect(() => {\n    const updateMounted = (name, value) => {\n      const field = get(control._fields, name);\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n    updateMounted(name, true);\n    return () => {\n      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n      if (isNameInFieldArray(control._names.array, name) ? _shouldUnregisterField && !control._stateFlags.action : _shouldUnregisterField) {\n        control.unregister(name, {\n          keepDefaultValue: true\n        });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n  return {\n    field: {\n      onChange: event => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => {\n        const field = get(control._fields, name);\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: message => elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity()\n          };\n        }\n      }\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nvar getFocusFieldName = function (name, index) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return options.shouldFocus || isUndefined(options.shouldFocus) ? options.focusName || `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.` : '';\n};\nvar mapCurrentIds = (values, _fieldIds, keyName) => values.map((value, index) => {\n  const output = _fieldIds.current[index];\n  return Object.assign(Object.assign({}, value), output ? {\n    [keyName]: output[keyName]\n  } : {});\n});\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign(Object.assign({}, value[keyName] ? {} : {\n    [keyName]: generateId()\n  }), value));\n};\nfunction append(data, value) {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? value.map(() => undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nvar omitKeys = (fields, keyName) => fields.map(function () {\n  let field = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return omit(field, keyName);\n});\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar updateAt = (fieldValues, index, value) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\nconst useFieldArray = props => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = props;\n  const [fields, setFields] = React.useState(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n  useSubscribe({\n    callback: _ref2 => {\n      let {\n        values,\n        name: fieldArrayName\n      } = _ref2;\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array\n  });\n  const updateValues = React.useCallback(updatedFieldArrayValuesWithKey => {\n    const updatedFieldArrayValues = omitKeys(updatedFieldArrayValuesWithKey, keyName);\n    _actioned.current = true;\n    set(control._formValues, name, updatedFieldArrayValues);\n    return updatedFieldArrayValues;\n  }, [control, name, keyName]);\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = append(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(appendValue, keyName));\n    control._updateFieldArray(name, append, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, updatedFieldArrayValuesWithKey.length - appendValue.length, options);\n  };\n  const prepend$1 = (value, options) => {\n    const updatedFieldArrayValuesWithKey = prepend(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, prepend, {\n      argA: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValuesWithKey = removeArrayAt(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index);\n    control._updateFieldArray(name, removeArrayAt, {\n      argA: index\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const insert$1 = (index, value, options) => {\n    const updatedFieldArrayValuesWithKey = insert(mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName), index, mapIds(convertToArrayPayload(value), keyName));\n    control._updateFieldArray(name, insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updateValues(updatedFieldArrayValuesWithKey));\n    setFields(updatedFieldArrayValuesWithKey);\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(name, swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const move = (from, to) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(name, moveArrayAt, {\n      argA: from,\n      argB: to\n    }, updateValues(updatedFieldArrayValuesWithKey), false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  const update = (index, value) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName);\n    const updatedFieldArrayValues = updateAt(updatedFieldArrayValuesWithKey, index, value);\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(name, updateAt, {\n      argA: index,\n      argB: value\n    }, updateValues(_fieldIds.current), true, false);\n    setFields(_fieldIds.current);\n  };\n  const replace = value => {\n    const updatedFieldArrayValuesWithKey = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(name, () => updatedFieldArrayValuesWithKey, {}, updateValues(updatedFieldArrayValuesWithKey), true, false);\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n    if (_actioned.current) {\n      control._executeSchema([name]).then(result => {\n        const error = get(result.errors, name);\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors\n          });\n        }\n      });\n    }\n    control._subjects.watch.next({\n      name,\n      values: control._formValues\n    });\n    control._names.focus && focusFieldBy(control._fields, key => key.startsWith(control._names.focus));\n    control._names.focus = '';\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend$1, [updateValues, name, control, keyName]),\n    append: React.useCallback(append$1, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert$1, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields\n  };\n};\nvar isFunction = value => typeof value === 'function';\nfunction cloneObject(data) {\n  let copy;\n  const isArray = Array.isArray(data);\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n  return copy;\n}\nfunction createSubject() {\n  let _observers = [];\n  const next = value => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n  const subscribe = observer => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter(o => o !== observer);\n      }\n    };\n  };\n  const unsubscribe = () => {\n    _observers = [];\n  };\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe\n  };\n}\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key];\n    if (!keys2.includes(key)) {\n      return false;\n    }\n    if (key !== 'ref') {\n      const val2 = object2[key];\n      if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual(val1, val2) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isBoolean = value => typeof value === 'boolean';\nvar isFileInput = element => element.type === 'file';\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isMultipleSelect = element => element.type === `select-multiple`;\nvar isRadioInput = element => element.type === 'radio';\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nvar live = ref => isHTMLElement(ref) && document.contains(ref);\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref3) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref3;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(_f) {\n  const ref = _f.ref;\n  if (_f.refs ? _f.refs.every(ref => ref.disabled) : ref.disabled) {\n    return;\n  }\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(_ref4 => {\n      let {\n        value\n      } = _ref4;\n      return value;\n    });\n  }\n  if (isCheckBoxInput(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n  const fields = {};\n  for (const name of fieldsNames) {\n    const field = get(_fields, name);\n    field && set(fields, name, field._f);\n  }\n  return {\n    criteriaMode,\n    names: [...fieldsNames],\n    fields,\n    shouldUseNativeValidation\n  };\n};\nvar hasValidation = options => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nfunction schemaErrorLookup(errors, _fields, name) {\n  const error = get(errors, name);\n  if (error || isKey(name)) {\n    return {\n      error,\n      name\n    };\n  }\n  const names = name.split('.');\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return {\n        name\n      };\n    }\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError\n      };\n    }\n    names.pop();\n  }\n  return {\n    name\n  };\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        !isNullOrUndefined(defaultValues) && deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name, [])).length && unset(ref, name);\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (field, inputValue, validateAllFieldCriteria, shouldUseNativeValidation) => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef = refs ? refs[0] : ref;\n  const setCustomValidty = message => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name].message);\n        return error;\n      }\n    }\n  }\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateError = getValidateError(await validate[key](inputValue), inputRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          setCustomValidty(validateError.message);\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: inputRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  setCustomValidty(true);\n  return error;\n};\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true\n};\nconst isWindowUndefined = typeof window === 'undefined';\nfunction createFormControl() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let _options = Object.assign(Object.assign({}, defaultOptions), props);\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false\n  };\n  let _names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set()\n  };\n  let delayErrorCallback;\n  let timer = 0;\n  let validateFields = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  };\n  const _subjects = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject()\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n  const debounce = (callback, wait) => function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    clearTimeout(timer);\n    timer = window.setTimeout(() => callback(...args), wait);\n  };\n  const isFieldWatched = (name, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || _names.watch.has((name.match(/\\w+/) || [])[0]));\n  const _updateValid = async shouldSkipRender => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver ? isEmptyObject((await _executeSchema()).errors) : await executeBuildInValidation(_fields, true);\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid\n        });\n      }\n    }\n    return isValid;\n  };\n  const _updateFieldArray = function (name, method, args) {\n    let values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let shouldSetValues = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let shouldSetFields = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _stateFlags.action = true;\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid\n    });\n  };\n  const updateErrors = (name, error) => (set(_formState.errors, name, error), _subjects.state.next({\n    errors: _formState.errors\n  }));\n  const updateValidAndValue = (name, shouldSkipSetValueAs, ref) => {\n    const field = get(_fields, name);\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n      isUndefined(defaultValue) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f)) : setFieldValue(name, defaultValue);\n    }\n    _stateFlags.mount && _updateValid();\n  };\n  const updateTouchAndDirty = function (name, fieldValue, isCurrentTouched) {\n    let shouldRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let isFieldDirty = false;\n    const output = {\n      name\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\n      isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty = isFieldDirty || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty = isFieldDirty || _proxyFormState.touchedFields && isPreviousFieldTouched !== isCurrentTouched;\n    }\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n    return isFieldDirty ? output : {};\n  };\n  const updateFieldArrayDirty = (name, value) => (set(_formState.dirtyFields, name, setFieldArrayDirtyFields(value, get(_defaultValues, name, []), get(_formState.dirtyFields, name, []))), unsetEmptyArray(_formState.dirtyFields, name));\n  const shouldRenderByError = async (shouldSkipRender, name, isValid, error, fieldState) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid = _proxyFormState.isValid && _formState.isValid !== isValid;\n    if (props.delayError && error) {\n      delayErrorCallback = delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n    }\n    if (((error ? !deepEqual(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) && !shouldSkipRender) {\n      const updatedFormState = Object.assign(Object.assign(Object.assign({}, fieldState), shouldUpdateValid ? {\n        isValid\n      } : {}), {\n        errors: _formState.errors,\n        name\n      });\n      _formState = Object.assign(Object.assign({}, _formState), updatedFormState);\n      _subjects.state.next(updatedFormState);\n    }\n    validateFields[name]--;\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false\n      });\n      validateFields = {};\n    }\n  };\n  const _executeSchema = async name => _options.resolver ? await _options.resolver(Object.assign({}, _formValues), _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation)) : {};\n  const executeSchemaAndUpdateState = async names => {\n    const {\n      errors\n    } = await _executeSchema();\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n    return errors;\n  };\n  const executeBuildInValidation = async function (fields, shouldOnlyCheckValid) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      valid: true\n    };\n    for (const name in fields) {\n      const field = fields[name];\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n        if (fieldReference) {\n          const fieldError = await validateField(field, get(_formValues, fieldReference.name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation);\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name] ? set(_formState.errors, fieldReference.name, fieldError[fieldReference.name]) : unset(_formState.errors, fieldReference.name);\n          }\n        }\n        fieldValue && (await executeBuildInValidation(fieldValue, shouldOnlyCheckValid, context));\n      }\n    }\n    return context.valid;\n  };\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name);\n      field && (field._f.refs ? field._f.refs.every(ref => !live(ref)) : !live(field._f.ref)) && unregister(name);\n    }\n    _names.unMount = new Set();\n  };\n  const _getDirty = (name, data) => (name && data && set(_formValues, name, data), !deepEqual(getValues(), _defaultValues));\n  const _getWatch = (names, defaultValue, isGlobal) => {\n    const fieldValues = Object.assign({}, _stateFlags.mount ? _formValues : isUndefined(defaultValue) ? _defaultValues : isString(names) ? {\n      [names]: defaultValue\n    } : defaultValue);\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n  const _getFieldArray = name => get(_stateFlags.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []);\n  const setFieldValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    let fieldValue = value;\n    if (field) {\n      const fieldReference = field._f;\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n        fieldValue = isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value) ? '' : value;\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(selectRef => selectRef.selected = fieldValue.includes(selectRef.value));\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1 ? fieldReference.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find(data => data === checkboxRef.value) : fieldValue === checkboxRef.value) : fieldReference.refs[0].checked = !!fieldValue;\n          } else {\n            fieldReference.refs.forEach(radioRef => radioRef.checked = radioRef.value === fieldValue);\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n    (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n    options.shouldValidate && trigger(name);\n  };\n  const setValues = (name, value, options) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n      (_names.array.has(name) || !isPrimitive(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    set(_formValues, name, value);\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues\n      });\n      if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) && options.shouldDirty) {\n        updateFieldArrayDirty(name, value);\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value)\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value) ? setValues(name, value, options) : setFieldValue(name, value, options);\n    }\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name\n    });\n  };\n  const handleChange = async event => {\n    const target = event.target;\n    let name = target.name;\n    const field = get(_fields, name);\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n      const isWatched = isFieldWatched(name, isBlurEvent);\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n      set(_formValues, name, fieldValue);\n      const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n      !isBlurEvent && _subjects.watch.next({\n        name,\n        type: event.type\n      });\n      if (shouldSkipValidation) {\n        return shouldRender && _subjects.state.next(Object.assign({\n          name\n        }, isWatched ? {} : fieldState));\n      }\n      !isBlurEvent && isWatched && _subjects.state.next({});\n      validateFields[name] = validateFields[name] ? +1 : 1;\n      _proxyFormState.isValidating && _subjects.state.next({\n        isValidating: true\n      });\n      if (_options.resolver) {\n        const {\n          errors\n        } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n        const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (await validateField(field, get(_formValues, name), shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n        isValid = await _updateValid(true);\n      }\n      field._f.deps && trigger(field._f.deps);\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n  const trigger = async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name);\n    _subjects.state.next({\n      isValidating: true\n    });\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n      isValid = isEmptyObject(errors);\n      validationResult = name ? !fieldNames.some(name => get(errors, name)) : isValid;\n    } else if (name) {\n      validationResult = (await Promise.all(fieldNames.map(async fieldName => {\n        const field = get(_fields, fieldName);\n        return await executeBuildInValidation(field && field._f ? {\n          [fieldName]: field\n        } : field);\n      }))).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n    _subjects.state.next(Object.assign(Object.assign(Object.assign({}, !isString(name) || _proxyFormState.isValid && isValid !== _formState.isValid ? {} : {\n      name\n    }), _options.resolver ? {\n      isValid\n    } : {}), {\n      errors: _formState.errors,\n      isValidating: false\n    }));\n    options.shouldFocus && !validationResult && focusFieldBy(_fields, key => get(_formState.errors, key), name ? fieldNames : _names.mount);\n    return validationResult;\n  };\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, _defaultValues), _stateFlags.mount ? _formValues : {});\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(_formState.errors, inputName)) : _formState.errors = {};\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = (get(_fields, name, {\n      _f: {}\n    })._f || {}).ref;\n    set(_formState.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watch = (name, defaultValue) => isFunction(name) ? _subjects.watch.subscribe({\n    next: info => name(_getWatch(undefined, defaultValue), info)\n  }) : _getWatch(name, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);\n      }\n    }\n    _subjects.watch.next({});\n    _subjects.state.next(Object.assign(Object.assign({}, _formState), !options.keepDirty ? {} : {\n      isDirty: _getDirty()\n    }));\n    !options.keepIsValid && _updateValid();\n  };\n  const register = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(_fields, name);\n    set(_fields, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    _names.mount.add(name);\n    !isUndefined(options.value) && !options.disabled && set(_formValues, name, get(_formValues, name, options.value));\n    field ? isBoolean(options.disabled) && set(_formValues, name, options.disabled ? undefined : get(_formValues, name, getFieldValue(field._f))) : updateValidAndValue(name, true);\n    return isWindowUndefined ? {\n      name: name\n    } : Object.assign(Object.assign({\n      name\n    }, isBoolean(options.disabled) ? {\n      disabled: options.disabled\n    } : {}), {\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          register(name, options);\n          let field = get(_fields, name);\n          const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll('input,select,textarea')[0] || ref : ref : ref;\n          const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n          if (fieldRef === field._f.ref || isRadioOrCheckbox && compact(field._f.refs || []).find(option => option === fieldRef)) {\n            return;\n          }\n          field = {\n            _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n              refs: [...compact(field._f.refs || []).filter(live), fieldRef],\n              ref: {\n                type: fieldRef.type,\n                name\n              }\n            }) : Object.assign(Object.assign({}, field._f), {\n              ref: fieldRef\n            })\n          };\n          set(_fields, name, field);\n          (!options || !options.disabled) && updateValidAndValue(name, false, fieldRef);\n        } else {\n          const field = get(_fields, name, {});\n          const shouldUnregister = _options.shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n          }\n          shouldUnregister && !(isNameInFieldArray(_names.array, name) && _stateFlags.action) && _names.unMount.add(name);\n        }\n      }\n    });\n  };\n  const handleSubmit = (onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = _options.shouldUnregister ? cloneObject(_formValues) : Object.assign({}, _formValues);\n    _subjects.state.next({\n      isSubmitting: true\n    });\n    try {\n      if (_options.resolver) {\n        const {\n          errors,\n          values\n        } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuildInValidation(_fields);\n      }\n      if (isEmptyObject(_formState.errors) && Object.keys(_formState.errors).every(name => get(fieldValues, name))) {\n        _subjects.state.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(_formState.errors, e));\n        _options.shouldFocusError && focusFieldBy(_fields, key => get(_formState.errors, key), _names.mount);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      _formState.isSubmitted = true;\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && hasNoPromiseError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors\n      });\n    }\n  };\n  const resetField = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue ? _getDirty(name, get(_defaultValues, name)) : _getDirty();\n    }\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n    _subjects.state.next(Object.assign({}, _formState));\n  };\n  const reset = function (formValues) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues) ? cloneUpdatedValues : _defaultValues;\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n            try {\n              isHTMLElement(fieldReference) && fieldReference.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n      _formValues = props.shouldUnregister ? keepStateOptions.keepDefaultValues ? cloneObject(_defaultValues) : {} : cloneUpdatedValues;\n      _fields = {};\n      _subjects.watch.next({\n        values\n      });\n      _subjects.array.next({\n        values\n      });\n    }\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: ''\n    };\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,\n      isDirty: keepStateOptions.keepDirty ? _formState.isDirty : keepStateOptions.keepDefaultValues ? !deepEqual(formValues, _defaultValues) : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? Object.entries(formValues).reduce((previous, _ref5) => {\n        let [key, value] = _ref5;\n        return Object.assign(Object.assign({}, previous), {\n          [key]: value !== get(_defaultValues, key)\n        });\n      }, {}) : {},\n      touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n    _stateFlags.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n  const setFocus = name => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = Object.assign(Object.assign({}, _options), value);\n      }\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus\n  };\n}\nfunction useForm() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const _formControl = React.useRef();\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {}\n  });\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = Object.assign(Object.assign({}, createFormControl(props)), {\n      formState\n    });\n  }\n  const control = _formControl.current.control;\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: formState => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = Object.assign(Object.assign({}, control._formState), formState);\n        updateFormState(Object.assign({}, control._formState));\n      }\n    }\n  });\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n  _formControl.current.formState = getProxyFormState(formState, control._proxyFormState);\n  return _formControl.current;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"mappings":";AAEA,sBAAgBA,OAAqB,IACnCA,OAAO,CAACC,IAAI,KAAK,UAAU;ACH7B,mBAAgBC,IAAa,IAAKA,IAAI,YAAYC,IAAI;ACAtD,wBAAgBC,KAAc,IAAgCA,KAAK,IAAI,IAAI;ACGpE,MAAMC,YAAY,GAAID,KAAc,IAAK,OAAOA,KAAK,KAAK,QAAQ;AAEzE,eAAkCA,KAAc,IAC9C,CAACE,iBAAiB,CAACF,KAAK,CAAC,IACzB,CAACG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IACrBC,YAAY,CAACD,KAAK,CAAC,IACnB,CAACK,YAAY,CAACL,KAAK,CAAC;ACJtB,yBAAgBM,KAAc,IAC5BC,QAAQ,CAACD,KAAK,CAAC,IAAKA,KAAe,CAACE,MAAM,GACtCC,eAAe,CAAEH,KAAe,CAACE,MAAM,CAAC,GACrCF,KAAe,CAACE,MAAM,CAACE,OAAO,GAC9BJ,KAAe,CAACE,MAAM,CAACR,KAAK,GAC/BM,KAAK;ACVX,wBAAgBK,IAAY,IAAKA,IAAI,CAACC,SAAS,CAAC,CAAC,EAAED,IAAI,CAACE,MAAM,CAAC,KAAK,CAAC,CAAC,IAAIF,IAAI;ACI9E,yBAAe,CAACG,KAA6B,EAAEH,IAAuB,KACpE,CAAC,GAAGG,KAAK,CAAC,CAACC,IAAI,CAAEC,OAAO,IAAKC,iBAAiB,CAACN,IAAI,CAAC,KAAKK,OAAO,CAAC;ACLnE,cAAgBhB,KAAY,IAAKA,KAAK,CAACkB,MAAM,CAACC,OAAO,CAAC;ACAtD,kBAAgBC,GAAY,IAAuBA,GAAG,KAAKC,SAAS;ACKpE,UAAe,CAAIC,GAAM,EAAEC,IAAY,EAAEC,YAAsB;EAC7D,IAAIjB,QAAQ,CAACe,GAAG,CAAC,IAAIC,IAAI,EAAE;IACzB,MAAME,MAAM,GAAGC,OAAO,CAACH,IAAI,CAACI,KAAK,CAAC,WAAW,CAAC,CAAC,CAACC,MAAM,CACpD,CAACH,MAAM,EAAEI,GAAG,KAAM3B,iBAAiB,CAACuB,MAAM,CAAC,GAAGA,MAAM,GAAGA,MAAM,CAACI,GAAG,CAAE,EACnEP,GAAG,CACJ;IAED,OAAOQ,WAAW,CAACL,MAAM,CAAC,IAAIA,MAAM,KAAKH,GAAG,GACxCQ,WAAW,CAACR,GAAG,CAACC,IAAe,CAAC,CAAC,GAC/BC,YAAY,GACZF,GAAG,CAACC,IAAe,CAAC,GACtBE,MAAM;;EAGZ,OAAOJ,SAAS;AAClB,CAAC;AClBM,MAAMU,MAAM,GAAG;EACpBC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE;CACT;AAEM,MAAMC,eAAe,GAAmB;EAC7CC,MAAM,EAAE,QAAQ;EAChBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE,UAAU;EACpBC,SAAS,EAAE,WAAW;EACtBC,GAAG,EAAE;CACN;AAEM,MAAMC,sBAAsB,GAAG;EACpCC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,SAAS,EAAE,WAAW;EACtBC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,QAAQ,EAAE;CACX;ACvBD,WAAe,CACbC,MAAS,EACTnB,GAAQ;EAER,MAAMoB,IAAI,qBAAQD,MAAM,CAAE;EAC1B,OAAOC,IAAI,CAACpB,GAAG,CAAC;EAEhB,OAAOoB,IAAI;AACb,CAAC;ACHD,MAAMC,eAAe,GAAGC,KAAK,CAACC,aAAa,CAAuB,IAAI,CAAC;MAE1DC,cAAc,GAAG,MAG5BF,KAAK,CAACG,UAAU,CAACJ,eAAe;MAErBK,YAAY,GAIvBC,KAAgD,IAEhDL,oBAACD,eAAe,CAACO,QAAQ;EACvBzD,KAAK,EAAE0D,IAAI,CAACF,KAAK,EAAE,UAAU;AAA6B,GAEzDA,KAAK,CAACG,QAAQ,CACU;ACnB7B,wBAAe,UACbC,SAAkC,EAClCC,eAA8B,EAC9BC,mBAAmC,EACtB;EAAA,IAAbC,MAAM,uEAAG,IAAI;EAEb,SAASC,YAAY,CAACC,IAA0B;IAC9C,OAAO;MACL,IAAIA,IAAI,IAAIL,SAAS,EAAE;QACrB,IAAIC,eAAe,CAACI,IAAI,CAAC,KAAK/B,eAAe,CAACK,GAAG,EAAE;UACjDsB,eAAe,CAACI,IAAI,CAAC,GAAG,CAACF,MAAM,IAAI7B,eAAe,CAACK,GAAG;;QAExDuB,mBAAmB,KAAKA,mBAAmB,CAACG,IAAI,CAAC,GAAG,IAAI,CAAC;QACzD,OAAOL,SAAS,CAACK,IAAI,CAAC;;MAExB,OAAO5C,SAAS;KACjB;;EAGH,MAAMI,MAAM,GAAG,EAA6B;EAC5C,KAAK,MAAMI,GAAG,IAAI+B,SAAS,EAAE;IAC3BM,MAAM,CAACC,cAAc,CAAC1C,MAAM,EAAEI,GAAG,EAAE;MACjCuC,GAAG,EAAEJ,YAAY,CAACnC,GAA2B;KAC9C,CAAC;;EAGJ,OAAOJ,MAAM;AACf,CAAC;AC1BD,oBAAgBzB,KAAc,IAC5BO,QAAQ,CAACP,KAAK,CAAC,IAAI,CAACkE,MAAM,CAACG,IAAI,CAACrE,KAAK,CAAC,CAACsE,MAAM;ACA/C,4BAAe,CACbC,aAAgB,EAChBV,eAAkB,EAClBE,MAAgB;EAEhB,MAAMH,SAAS,GAAGF,IAAI,CAACa,aAAa,EAAE,MAAM,CAAC;EAE7C,OACEC,aAAa,CAACZ,SAAS,CAAC,IACxBM,MAAM,CAACG,IAAI,CAACT,SAAS,CAAC,CAACU,MAAM,IAAIJ,MAAM,CAACG,IAAI,CAACR,eAAe,CAAC,CAACS,MAAM,IACpEJ,MAAM,CAACG,IAAI,CAACT,SAAS,CAAC,CAACa,IAAI,CACxB5C,GAAG,IACFgC,eAAe,CAAChC,GAA0B,CAAC,MAC1C,CAACkC,MAAM,IAAI7B,eAAe,CAACK,GAAG,CAAC,CACnC;AAEL,CAAC;ACrBD,4BAAmBvC,KAAQ,IAAMG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAE;ACExE,4BAAe,CACbW,IAAQ,EACR+D,UAAmB,KAEnB,CAAC/D,IAAI,IACL,CAAC+D,UAAU,IACX/D,IAAI,KAAK+D,UAAU,IACnBC,qBAAqB,CAAChE,IAAI,CAAC,CAACI,IAAI,CAC7B6D,WAAW,IACVA,WAAW,KACVA,WAAW,CAACC,UAAU,CAACH,UAAU,CAAC,IACjCA,UAAU,CAACG,UAAU,CAACD,WAAW,CAAC,CAAC,CACxC;ACCH,MAAME,QAAQ,GACZC,aAA+D;EAE/D,IAAIA,aAAa,CAAC/D,OAAO,EAAE;IACzB+D,aAAa,CAAC/D,OAAO,CAACgE,WAAW,EAAE;IACnCD,aAAa,CAAC/D,OAAO,GAAGK,SAAS;;AAErC,CAAC;AAED,MAAM4D,uBAAuB,GAAG,QAAyC;EAAA,IAArC;IAAEF,aAAa;IAAEG;EAAM,CAAc;EACvE,IAAIA,MAAM,CAAClE,OAAO,CAACmE,QAAQ,EAAE;IAC3BL,QAAQ,CAACC,aAAa,CAAC;GACxB,MAAM,IAAI,CAACA,aAAa,CAAC/D,OAAO,EAAE;IACjC+D,aAAa,CAAC/D,OAAO,GAAGkE,MAAM,CAAClE,OAAO,CAACoE,OAAO,CAACC,SAAS,CAAC;MACvDC,IAAI,EAAEJ,MAAM,CAAClE,OAAO,CAACuE;KACtB,CAAC;;AAEN,CAAC;SAEeC,YAAY,CAAIhC,KAAe;EAC7C,MAAMuB,aAAa,GAAG5B,KAAK,CAACsC,MAAM,EAAgB;EAClD,MAAMP,MAAM,GAAG/B,KAAK,CAACsC,MAAM,CAACjC,KAAK,CAAC;EAClC0B,MAAM,CAAClE,OAAO,GAAGwC,KAAK;EAEtByB,uBAAuB,CAAC;IACtBF,aAAa;IACbG;GACD,CAAC;EAEF/B,KAAK,CAACuC,SAAS,CAAC;IACdT,uBAAuB,CAAC;MACtBF,aAAa;MACbG;KACD,CAAC;IAEF,OAAO,MAAMJ,QAAQ,CAACC,aAAa,CAAC;GACrC,EAAE,EAAE,CAAC;AACR;ACtCA,SAASY,YAAY,CACnBnC,KAAuC;EAEvC,MAAMoC,OAAO,GAAGvC,cAAc,EAAgB;EAC9C,MAAM;IAAEwC,OAAO,GAAGD,OAAO,CAACC,OAAO;IAAEV,QAAQ;IAAExE;EAAI,CAAE,GAAG6C,KAAK,IAAI,EAAE;EACjE,MAAM,CAACI,SAAS,EAAEkC,eAAe,CAAC,GAAG3C,KAAK,CAAC4C,QAAQ,CAACF,OAAO,CAACG,UAAU,CAAC;EACvE,MAAMC,oBAAoB,GAAG9C,KAAK,CAACsC,MAAM,CAAC;IACxCS,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,KAAK;IAClBC,aAAa,EAAE,KAAK;IACpBC,YAAY,EAAE,KAAK;IACnBC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT,CAAC;EACF,MAAMC,KAAK,GAAGrD,KAAK,CAACsC,MAAM,CAAC9E,IAAI,CAAC;EAEhC6F,KAAK,CAACxF,OAAO,GAAGL,IAAI;EAEpB6E,YAAY,CAAC;IACXL,QAAQ;IACRI,QAAQ,EAAG3B,SAAS,IAClB6C,qBAAqB,CACnBD,KAAK,CAACxF,OAA4B,EAClC4C,SAAS,CAACjD,IAAI,CACf,IACD+F,qBAAqB,CAAC9C,SAAS,EAAEqC,oBAAoB,CAACjF,OAAO,CAAC,IAC9D8E,eAAe,iCACVD,OAAO,CAACG,UAAU,GAClBpC,SAAS,EACZ;IACJwB,OAAO,EAAES,OAAO,CAACc,SAAS,CAACC;GAC5B,CAAC;EAEF,OAAOC,iBAAiB,CACtBjD,SAAS,EACTiC,OAAO,CAAChC,eAAe,EACvBoC,oBAAoB,CAACjF,OAAO,EAC5B,KAAK,CACN;AACH;ACrDA,eAAgBhB,KAAc,IAAsB,OAAOA,KAAK,KAAK,QAAQ;SCI7D8G,mBAAmB,CACjChG,KAAoC,EACpCiG,MAAa,EACbC,UAAwB,EACxBC,QAAkB;EAElB,MAAM7G,OAAO,GAAGD,KAAK,CAACC,OAAO,CAACU,KAAK,CAAC;EACpC,IAAIoG,QAAQ,CAACpG,KAAK,CAAC,EAAE;IACnBmG,QAAQ,IAAIF,MAAM,CAACI,KAAK,CAACC,GAAG,CAACtG,KAA0B,CAAC;IACxD,OAAOsD,GAAG,CAAC4C,UAAU,EAAElG,KAA0B,CAAC;;EAGpD,IAAIV,OAAO,EAAE;IACX,OAAOU,KAAK,CAACuG,GAAG,CACbC,SAAS,KACRL,QAAQ,IAAIF,MAAM,CAACI,KAAK,CAACC,GAAG,CAACE,SAA8B,CAAC,EAC5DlD,GAAG,CAAC4C,UAAU,EAAEM,SAA8B,CAAC,CAChD,CACF;;EAGHL,QAAQ,KAAKF,MAAM,CAACQ,QAAQ,GAAG,IAAI,CAAC;EACpC,OAAOP,UAAU;AACnB;SCqBgBQ,QAAQ,CAAehE,KAAmC;EACxE,MAAMoC,OAAO,GAAGvC,cAAc,EAAE;EAChC,MAAM;IACJwC,OAAO,GAAGD,OAAO,CAACC,OAAO;IACzBlF,IAAI;IACJa,YAAY;IACZ2D;EAAQ,CACT,GAAG3B,KAAK,IAAI,EAAE;EACf,MAAMgD,KAAK,GAAGrD,KAAK,CAACsC,MAAM,CAAC9E,IAAI,CAAC;EAEhC6F,KAAK,CAACxF,OAAO,GAAGL,IAAI;EAEpB6E,YAAY,CAAC;IACXL,QAAQ;IACRC,OAAO,EAAES,OAAO,CAACc,SAAS,CAACQ,KAAK;IAChC5B,QAAQ,EAAG3B,SAAS;MAClB,IACE6C,qBAAqB,CACnBD,KAAK,CAACxF,OAA4B,EAClC4C,SAAS,CAACjD,IAAI,CACf,EACD;QACA,MAAM8G,WAAW,GAAGX,mBAAmB,CACrCN,KAAK,CAACxF,OAAkD,EACxD6E,OAAO,CAACkB,MAAM,EACdnD,SAAS,CAAC8D,MAAM,IAAI7B,OAAO,CAAC8B,WAAW,CACxC;QAEDC,WAAW,CACT9F,WAAW,CAAC0E,KAAK,CAACxF,OAAO,CAAC,qBACjByG,WAAW,IAChBtH,KAAK,CAACC,OAAO,CAACqH,WAAW,CAAC,GAC1B,CAAC,GAAGA,WAAW,CAAC,GAChBA,WAAW,CAChB;;;GAGN,CAAC;EAEF,MAAM,CAACzH,KAAK,EAAE4H,WAAW,CAAC,GAAGzE,KAAK,CAAC4C,QAAQ,CACzCjE,WAAW,CAACN,YAAY,CAAC,GACrBqE,OAAO,CAACgC,SAAS,CAAClH,IAAyB,CAAC,GAC5Ca,YAAY,CACjB;EAED2B,KAAK,CAACuC,SAAS,CAAC;IACdG,OAAO,CAACiC,gBAAgB,EAAE;GAC3B,CAAC;EAEF,OAAO9H,KAAK;AACd;SChFgB+H,aAAa,CAI3BvE,KAA8C;EAE9C,MAAMoC,OAAO,GAAGvC,cAAc,EAAgB;EAC9C,MAAM;IAAE1C,IAAI;IAAEkF,OAAO,GAAGD,OAAO,CAACC,OAAO;IAAEmC;EAAgB,CAAE,GAAGxE,KAAK;EACnE,MAAMxD,KAAK,GAAGwH,QAAQ,CAAC;IACrB3B,OAAO;IACPlF,IAAI;IACJa,YAAY,EAAE4C,GAAG,CACfyB,OAAO,CAAC8B,WAAW,EACnBhH,IAAI,EACJyD,GAAG,CAACyB,OAAO,CAACoC,cAAc,EAAEtH,IAAI,EAAE6C,KAAK,CAAChC,YAAY,CAAC;GAExD,CAAC;EACF,MAAMoC,SAAS,GAAG+B,YAAY,CAAC;IAC7BE,OAAO;IACPlF;GACD,CAAC;EACF,MAAM6F,KAAK,GAAGrD,KAAK,CAACsC,MAAM,CAAC9E,IAAI,CAAC;EAEhC6F,KAAK,CAACxF,OAAO,GAAGL,IAAI;EAEpB,MAAMuH,aAAa,GAAGrC,OAAO,CAACsC,QAAQ,CAACxH,IAAI,kCACtC6C,KAAK,CAAC4E,KAAK;IACdpI;EAAK,GACL;EAEFmD,KAAK,CAACuC,SAAS,CAAC;IACd,MAAM2C,aAAa,GAAG,CAAC1H,IAAuB,EAAEX,KAAc;MAC5D,MAAMsI,KAAK,GAAUlE,GAAG,CAACyB,OAAO,CAAC0C,OAAO,EAAE5H,IAAI,CAAC;MAE/C,IAAI2H,KAAK,EAAE;QACTA,KAAK,CAACE,EAAE,CAACC,KAAK,GAAGzI,KAAK;;KAEzB;IAEDqI,aAAa,CAAC1H,IAAI,EAAE,IAAI,CAAC;IAEzB,OAAO;MACL,MAAM+H,sBAAsB,GAC1B7C,OAAO,CAAC8C,QAAQ,CAACX,gBAAgB,IAAIA,gBAAgB;MAEvD,IACEY,kBAAkB,CAAC/C,OAAO,CAACkB,MAAM,CAAC8B,KAAK,EAAElI,IAAI,CAAC,GAC1C+H,sBAAsB,IAAI,CAAC7C,OAAO,CAACiD,WAAW,CAACC,MAAM,GACrDL,sBAAsB,EAC1B;QACA7C,OAAO,CAACmD,UAAU,CAACrI,IAAI,EAAE;UAAEsI,gBAAgB,EAAE;QAAI,CAAE,CAAC;OACrD,MAAM;QACLZ,aAAa,CAAC1H,IAAI,EAAE,KAAK,CAAC;;KAE7B;GACF,EAAE,CAACA,IAAI,EAAEkF,OAAO,EAAEmC,gBAAgB,CAAC,CAAC;EAErC,OAAO;IACLM,KAAK,EAAE;MACLlG,QAAQ,EAAG9B,KAAK;QACd4H,aAAa,CAAC9F,QAAQ,CAAC;UACrB5B,MAAM,EAAE;YACNR,KAAK,EAAEkJ,kBAAkB,CAAC5I,KAAK,CAAC;YAChCK,IAAI,EAAEA;WACP;UACDd,IAAI,EAAEkC,MAAM,CAACE;SACd,CAAC;OACH;MACDE,MAAM,EAAE;QACN+F,aAAa,CAAC/F,MAAM,CAAC;UACnB3B,MAAM,EAAE;YACNR,KAAK;YACLW,IAAI,EAAEA;WACP;UACDd,IAAI,EAAEkC,MAAM,CAACC;SACd,CAAC;OACH;MACDrB,IAAI;MACJX,KAAK;MACLmJ,GAAG,EAAGC,GAAG;QACP,MAAMd,KAAK,GAAGlE,GAAG,CAACyB,OAAO,CAAC0C,OAAO,EAAE5H,IAAI,CAAC;QAExC,IAAIyI,GAAG,IAAId,KAAK,IAAIc,GAAG,CAACC,KAAK,EAAE;UAC7Bf,KAAK,CAACE,EAAE,CAACW,GAAG,GAAG;YACbE,KAAK,EAAE,MAAMD,GAAG,CAACC,KAAK,EAAE;YACxBC,iBAAiB,EAAGC,OAAe,IACjCH,GAAG,CAACE,iBAAiB,CAACC,OAAO,CAAC;YAChCC,cAAc,EAAE,MAAMJ,GAAG,CAACI,cAAc;WACzC;;;KAGN;IACD5F,SAAS;IACT6F,UAAU,EAAE;MACVC,OAAO,EAAE,CAAC,CAACtF,GAAG,CAACR,SAAS,CAAC2C,MAAM,EAAE5F,IAAI,CAAC;MACtCuF,OAAO,EAAE,CAAC,CAAC9B,GAAG,CAACR,SAAS,CAACuC,WAAW,EAAExF,IAAI,CAAC;MAC3CgJ,SAAS,EAAE,CAAC,CAACvF,GAAG,CAACR,SAAS,CAACwC,aAAa,EAAEzF,IAAI,CAAC;MAC/CiJ,KAAK,EAAExF,GAAG,CAACR,SAAS,CAAC2C,MAAM,EAAE5F,IAAI;;GAEpC;AACH;MCnHMkJ,UAAU,GAIdrG,KAA2C,IACxCA,KAAK,CAACsG,MAAM,CAAC/B,aAAa,CAAsBvE,KAAK,CAAC;ACF3D,mBAAe,CACb7C,IAAuB,EACvBoJ,wBAAiC,EACjCxD,MAA2B,EAC3B1G,IAAY,EACZ0J,OAAuB,KAEvBQ,wBAAwB,mCAEfxD,MAAM,CAAC5F,IAAI,CAAC;EACfqJ,KAAK,kCACCzD,MAAM,CAAC5F,IAAI,CAAC,IAAI4F,MAAM,CAAC5F,IAAI,CAAE,CAACqJ,KAAK,GAAGzD,MAAM,CAAC5F,IAAI,CAAE,CAACqJ,KAAK,GAAG,EAAE;IAClE,CAACnK,IAAI,GAAG0J,OAAO,IAAI;EAAI;AAAA,KAG3B,EAAE;ACrBR,YAAgBvJ,KAAa,IAAK,OAAO,CAACiK,IAAI,CAACjK,KAAK,CAAC;ACErD,mBAAgBkK,KAAa,IAC3BxI,OAAO,CAACwI,KAAK,CAACC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACxI,KAAK,CAAC,OAAO,CAAC,CAAC;SCGhCyI,GAAG,CACzBC,MAAmB,EACnB9I,IAAY,EACZvB,KAAe;EAEf,IAAIsK,KAAK,GAAG,CAAC,CAAC;EACd,MAAMC,QAAQ,GAAGC,KAAK,CAACjJ,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,GAAGkJ,YAAY,CAAClJ,IAAI,CAAC;EAC1D,MAAM+C,MAAM,GAAGiG,QAAQ,CAACjG,MAAM;EAC9B,MAAMoG,SAAS,GAAGpG,MAAM,GAAG,CAAC;EAE5B,OAAO,EAAEgG,KAAK,GAAGhG,MAAM,EAAE;IACvB,MAAMzC,GAAG,GAAG0I,QAAQ,CAACD,KAAK,CAAC;IAC3B,IAAIK,QAAQ,GAAG3K,KAAK;IAEpB,IAAIsK,KAAK,KAAKI,SAAS,EAAE;MACvB,MAAME,QAAQ,GAAGP,MAAM,CAACxI,GAAG,CAAC;MAC5B8I,QAAQ,GACNpK,QAAQ,CAACqK,QAAQ,CAAC,IAAIzK,KAAK,CAACC,OAAO,CAACwK,QAAQ,CAAC,GACzCA,QAAQ,GACR,CAACC,KAAK,CAAC,CAACN,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC,CAAC,GAC5B,EAAE,GACF,EAAE;;IAEVD,MAAM,CAACxI,GAAG,CAAC,GAAG8I,QAAQ;IACtBN,MAAM,GAAGA,MAAM,CAACxI,GAAG,CAAC;;EAEtB,OAAOwI,MAAM;AACf;AC3BA,MAAMS,YAAY,GAAG,CACnBC,MAAiB,EACjBxF,QAAmC,EACnCyF,WAA0D;EAE1D,KAAK,MAAMnJ,GAAG,IAAImJ,WAAW,IAAI9G,MAAM,CAACG,IAAI,CAAC0G,MAAM,CAAC,EAAE;IACpD,MAAMzC,KAAK,GAAGlE,GAAG,CAAC2G,MAAM,EAAElJ,GAAG,CAAC;IAE9B,IAAIyG,KAAK,EAAE;MACT,MAAME,EAAE,GAAGF,KAAK,CAACE,EAAE;MACnB,MAAMxH,OAAO,GAAG0C,IAAI,CAAC4E,KAAK,EAAE,IAAI,CAAC;MAEjC,IAAIE,EAAE,IAAIjD,QAAQ,CAACiD,EAAE,CAAC7H,IAAI,CAAC,EAAE;QAC3B,IAAI6H,EAAE,CAACW,GAAG,CAACE,KAAK,IAAIvH,WAAW,CAAC0G,EAAE,CAACW,GAAG,CAACE,KAAK,EAAE,CAAC,EAAE;UAC/C;SACD,MAAM,IAAIb,EAAE,CAACyC,IAAI,EAAE;UAClBzC,EAAE,CAACyC,IAAI,CAAC,CAAC,CAAC,CAAC5B,KAAK,EAAE;UAClB;;OAEH,MAAM,IAAI9I,QAAQ,CAACS,OAAO,CAAC,EAAE;QAC5B8J,YAAY,CAAC9J,OAAO,EAAEuE,QAAQ,CAAC;;;;AAIvC,CAAC;AC3BD,wBAAe,UACb5E,IAAuB,EACvB2J,KAAa;EAAA,IACbY,8EAAiC,EAAE;EAAA,OAEnCA,OAAO,CAACC,WAAW,IAAIrJ,WAAW,CAACoJ,OAAO,CAACC,WAAW,CAAC,GACnDD,OAAO,CAACE,SAAS,IACjB,GAAGzK,IAAI,IAAImB,WAAW,CAACoJ,OAAO,CAACG,UAAU,CAAC,GAAGf,KAAK,GAAGY,OAAO,CAACG,UAAU,GAAG,GAC1E,EAAE;AAAA;ACPR,oBAAe,CACb3D,MAAW,EACX4D,SAAoC,EACpCC,OAAe,KAEf7D,MAAM,CAACL,GAAG,CAAC,CAACrH,KAAK,EAAEsK,KAAK;EACtB,MAAMkB,MAAM,GAAGF,SAAS,CAACtK,OAAO,CAACsJ,KAAgB,CAAC;EAElD,uCACKtK,KAAK,GACJwL,MAAM,GAAG;IAAE,CAACD,OAAO,GAAIC,MAAsB,CAACD,OAAO;EAAC,CAAE,GAAG,EAAE;AAErE,CAAC,CAAC;AChBJ,iBAAe;EACb,MAAME,CAAC,GACL,OAAOC,WAAW,KAAK,WAAW,GAAG3L,IAAI,CAAC4L,GAAG,EAAE,GAAGD,WAAW,CAACC,GAAG,EAAE,GAAG,IAAI;EAE5E,OAAO,sCAAsC,CAACxB,OAAO,CAAC,OAAO,EAAGyB,CAAC;IAC/D,MAAMC,CAAC,GAAG,CAACC,IAAI,CAACC,MAAM,EAAE,GAAG,EAAE,GAAGN,CAAC,IAAI,EAAE,GAAG,CAAC;IAE3C,OAAO,CAACG,CAAC,IAAI,GAAG,GAAGC,CAAC,GAAIA,CAAC,GAAG,GAAG,GAAI,GAAG,EAAEG,QAAQ,CAAC,EAAE,CAAC;GACrD,CAAC;AACJ,CAAC;ACLD,aAAe;EAAA,IAKbtE,6EAAuC,EAAE;EAAA,IACzC6D,OAAiB;EAAA,OAEjB7D,MAAM,CAACL,GAAG,CAAErH,KAAiC,oCACvCA,KAAK,CAACuL,OAAO,CAAC,GAAG,EAAE,GAAG;IAAE,CAACA,OAAO,GAAGU,UAAU;EAAE,CAAE,GAClDjM,KAAK,CACR,CAAyE;AAAA;SCbrDkM,MAAM,CAAIpM,IAAS,EAAEE,KAAc;EACzD,OAAO,CAAC,GAAG2E,qBAAqB,CAAC7E,IAAI,CAAC,EAAE,GAAG6E,qBAAqB,CAAC3E,KAAK,CAAC,CAAC;AAC1E;ACJA,qBAAmBA,KAAc,IAC/BG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,GAAGA,KAAK,CAACqH,GAAG,CAAC,MAAMhG,SAAS,CAAC,GAAGA,SAAS;SCOvC8K,MAAM,CAC5BrM,IAAS,EACTwK,KAAa,EACbtK,KAAe;EAEf,OAAO,CACL,GAAGF,IAAI,CAACsM,KAAK,CAAC,CAAC,EAAE9B,KAAK,CAAC,EACvB,GAAG3F,qBAAqB,CAAC3E,KAAK,CAAC,EAC/B,GAAGF,IAAI,CAACsM,KAAK,CAAC9B,KAAK,CAAC,CACrB;AACH;AChBA,kBAAe,CACbxK,IAAuB,EACvBuM,IAAY,EACZC,EAAU;EAEV,IAAInM,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC,EAAE;IACvB,IAAIgC,WAAW,CAAChC,IAAI,CAACwM,EAAE,CAAC,CAAC,EAAE;MACzBxM,IAAI,CAACwM,EAAE,CAAC,GAAGjL,SAAS;;IAEtBvB,IAAI,CAACyM,MAAM,CAACD,EAAE,EAAE,CAAC,EAAExM,IAAI,CAACyM,MAAM,CAACF,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,OAAOvM,IAAI;;EAGb,OAAO,EAAE;AACX,CAAC;ACZD,eAAe,CACbiL,MAAS,EACTQ,OAAe,KACZR,MAAM,CAAC1D,GAAG,CAAC;EAAA,IAACiB,KAAK,uEAAG,EAAE;EAAA,OAAK5E,IAAI,CAAC4E,KAAK,EAAEiD,OAAO,CAAC;AAAA,EAAC;SCL7BiB,OAAO,CAAI1M,IAAS,EAAEE,KAAc;EAC1D,OAAO,CAAC,GAAG2E,qBAAqB,CAAC3E,KAAK,CAAC,EAAE,GAAG2E,qBAAqB,CAAC7E,IAAI,CAAC,CAAC;AAC1E;ACAA,SAAS2M,eAAe,CAAI3M,IAAS,EAAE4M,OAAiB;EACtD,IAAIC,CAAC,GAAG,CAAC;EACT,MAAMC,IAAI,GAAG,CAAC,GAAG9M,IAAI,CAAC;EAEtB,KAAK,MAAMwK,KAAK,IAAIoC,OAAO,EAAE;IAC3BE,IAAI,CAACL,MAAM,CAACjC,KAAK,GAAGqC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,EAAE;;EAGL,OAAOjL,OAAO,CAACkL,IAAI,CAAC,CAACtI,MAAM,GAAGsI,IAAI,GAAG,EAAE;AACzC;AAEA,oBAAe,CAAI9M,IAAS,EAAEwK,KAAyB,KACrDxI,WAAW,CAACwI,KAAK,CAAC,GACd,EAAE,GACFmC,eAAe,CACb3M,IAAI,EACH6E,qBAAqB,CAAC2F,KAAK,CAAc,CAACuC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC,CACjE;ACtBP,kBAAe,CAAIjN,IAAS,EAAEkN,MAAc,EAAEC,MAAc;EAC1DnN,IAAI,CAACkN,MAAM,CAAC,GAAG,CAAClN,IAAI,CAACmN,MAAM,CAAC,EAAGnN,IAAI,CAACmN,MAAM,CAAC,GAAGnN,IAAI,CAACkN,MAAM,CAAC,CAAE,CAAC,CAAC,CAAC;AACjE,CAAC;ACFD,eAAe,CAAIvF,WAAgB,EAAE6C,KAAa,EAAEtK,KAAU;EAC5DyH,WAAW,CAAC6C,KAAK,CAAC,GAAGtK,KAAK;EAC1B,OAAOyH,WAAW;AACpB,CAAC;MC6BYyF,aAAa,GAKxB1J,KAAkE;EAElE,MAAMoC,OAAO,GAAGvC,cAAc,EAAE;EAChC,MAAM;IACJwC,OAAO,GAAGD,OAAO,CAACC,OAAO;IACzBlF,IAAI;IACJ4K,OAAO,GAAG,IAAgB;IAC1BvD;EAAgB,CACjB,GAAGxE,KAAK;EACT,MAAM,CAACuH,MAAM,EAAEoC,SAAS,CAAC,GAAGhK,KAAK,CAAC4C,QAAQ,CAExCqH,MAAM,CAACvH,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAAE4K,OAAO,CAAC,CAAC;EAChD,MAAMD,SAAS,GAAGnI,KAAK,CAACsC,MAAM,CAACsF,MAAM,CAAC;EACtC,MAAMvE,KAAK,GAAGrD,KAAK,CAACsC,MAAM,CAAC9E,IAAI,CAAC;EAChC,MAAM2M,SAAS,GAAGnK,KAAK,CAACsC,MAAM,CAAC,KAAK,CAAC;EAErCe,KAAK,CAACxF,OAAO,GAAGL,IAAI;EACpB2K,SAAS,CAACtK,OAAO,GAAG+J,MAAM;EAC1BlF,OAAO,CAACkB,MAAM,CAAC8B,KAAK,CAACzB,GAAG,CAACzG,IAAI,CAAC;EAE9B6E,YAAY,CAAC;IACXD,QAAQ,EAAE,SAAiC;MAAA,IAAhC;QAAEmC,MAAM;QAAE/G,IAAI,EAAE4M;MAAc,CAAE;MACzC,IAAIA,cAAc,KAAK/G,KAAK,CAACxF,OAAO,IAAI,CAACuM,cAAc,EAAE;QACvDJ,SAAS,CAACC,MAAM,CAAChJ,GAAG,CAACsD,MAAM,EAAElB,KAAK,CAACxF,OAAO,CAAC,EAAEuK,OAAO,CAAC,CAAC;;KAEzD;IACDnG,OAAO,EAAES,OAAO,CAACc,SAAS,CAACkC;GAC5B,CAAC;EAEF,MAAM2E,YAAY,GAAGrK,KAAK,CAACsK,WAAW,CAMlCC,8BAAiC;IAEjC,MAAMC,uBAAuB,GAAGC,QAAQ,CACtCF,8BAA8B,EAC9BnC,OAAO,CACR;IACD+B,SAAS,CAACtM,OAAO,GAAG,IAAI;IACxBoJ,GAAG,CAACvE,OAAO,CAAC8B,WAAW,EAAEhH,IAAI,EAAEgN,uBAAuB,CAAC;IACvD,OAAOA,uBAAuB;GAC/B,EACD,CAAC9H,OAAO,EAAElF,IAAI,EAAE4K,OAAO,CAAC,CACzB;EAED,MAAMW,QAAM,GAAG,CACblM,KAEwD,EACxDkL,OAA+B;IAE/B,MAAM2C,WAAW,GAAGlJ,qBAAqB,CAAC3E,KAAK,CAAC;IAChD,MAAM0N,8BAA8B,GAAGI,MAAQ,CAC7CC,aAAa,CAAClI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAAE2K,SAAS,EAAEC,OAAO,CAAC,EAC/D6B,MAAM,CAACS,WAAW,EAAEtC,OAAO,CAAC,CAC7B;IACD1F,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJmN,MAAQ,EACR;MACEG,IAAI,EAAEC,cAAc,CAAClO,KAAK;KAC3B,EACDwN,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDP,SAAS,CAACO,8BAA8B,CAAC;IAEzC7H,OAAO,CAACkB,MAAM,CAACsC,KAAK,GAAG8E,iBAAiB,CACtCxN,IAAI,EACJ+M,8BAA8B,CAACpJ,MAAM,GAAGuJ,WAAW,CAACvJ,MAAM,EAC1D4G,OAAO,CACR;GACF;EAED,MAAMsB,SAAO,GAAG,CACdxM,KAEwD,EACxDkL,OAA+B;IAE/B,MAAMwC,8BAA8B,GAAGU,OAAS,CAC9CL,aAAa,CAAClI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAAE2K,SAAS,EAAEC,OAAO,CAAC,EAC/D6B,MAAM,CAACzI,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC,CAC9C;IACD1F,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJyN,OAAS,EACT;MACEH,IAAI,EAAEC,cAAc,CAAClO,KAAK;KAC3B,EACDwN,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDP,SAAS,CAACO,8BAA8B,CAAC;IAEzC7H,OAAO,CAACkB,MAAM,CAACsC,KAAK,GAAG8E,iBAAiB,CAACxN,IAAI,EAAE,CAAC,EAAEuK,OAAO,CAAC;GAC3D;EAED,MAAMmD,MAAM,GAAI/D,KAAyB;IACvC,MAAMoD,8BAA8B,GAE9BY,aAAa,CACjBP,aAAa,CAAClI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAAE2K,SAAS,EAAEC,OAAO,CAAC,EAC/DjB,KAAK,CACN;IACDzE,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJ2N,aAAa,EACb;MACEL,IAAI,EAAE3D;KACP,EACDkD,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDP,SAAS,CAACO,8BAA8B,CAAC;GAC1C;EAED,MAAMvB,QAAM,GAAG,CACb7B,KAAa,EACbtK,KAEwD,EACxDkL,OAA+B;IAE/B,MAAMwC,8BAA8B,GAAGa,MAAQ,CAC7CR,aAAa,CAAClI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAAE2K,SAAS,EAAEC,OAAO,CAAC,EAC/DjB,KAAK,EACL8C,MAAM,CAACzI,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC,CAC9C;IACD1F,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJ4N,MAAQ,EACR;MACEN,IAAI,EAAE3D,KAAK;MACXkE,IAAI,EAAEN,cAAc,CAAClO,KAAK;KAC3B,EACDwN,YAAY,CAACE,8BAA8B,CAAC,CAC7C;IACDP,SAAS,CAACO,8BAA8B,CAAC;IAEzC7H,OAAO,CAACkB,MAAM,CAACsC,KAAK,GAAG8E,iBAAiB,CAACxN,IAAI,EAAE2J,KAAK,EAAEY,OAAO,CAAC;GAC/D;EAED,MAAMuD,IAAI,GAAG,CAACzB,MAAc,EAAEC,MAAc;IAC1C,MAAMS,8BAA8B,GAAGK,aAAa,CAClDlI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAC5B2K,SAAS,EACTC,OAAO,CACR;IACDmD,WAAW,CAAChB,8BAA8B,EAAEV,MAAM,EAAEC,MAAM,CAAC;IAC3DpH,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJ+N,WAAW,EACX;MACET,IAAI,EAAEjB,MAAM;MACZwB,IAAI,EAAEvB;KACP,EACDO,YAAY,CAACE,8BAA8B,CAAC,EAC5C,KAAK,CACN;IACDP,SAAS,CAACO,8BAA8B,CAAC;GAC1C;EAED,MAAMiB,IAAI,GAAG,CAACtC,IAAY,EAAEC,EAAU;IACpC,MAAMoB,8BAA8B,GAAGK,aAAa,CAClDlI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAC5B2K,SAAS,EACTC,OAAO,CACR;IACDqD,WAAW,CAAClB,8BAA8B,EAAErB,IAAI,EAAEC,EAAE,CAAC;IACrDzG,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJiO,WAAW,EACX;MACEX,IAAI,EAAE5B,IAAI;MACVmC,IAAI,EAAElC;KACP,EACDkB,YAAY,CAACE,8BAA8B,CAAC,EAC5C,KAAK,CACN;IACDP,SAAS,CAACO,8BAA8B,CAAC;GAC1C;EAED,MAAMmB,MAAM,GAAG,CACbvE,KAAa,EACbtK,KAAyD;IAEzD,MAAM0N,8BAA8B,GAAGK,aAAa,CAClDlI,OAAO,CAACwH,cAAc,CAAC1M,IAAI,CAAC,EAC5B2K,SAAS,EACTC,OAAO,CACR;IACD,MAAMoC,uBAAuB,GAAGmB,QAAQ,CACtCpB,8BAA8B,EAC9BpD,KAAK,EACLtK,KAAK,CACN;IACDsL,SAAS,CAACtK,OAAO,GAAGoM,MAAM,CAACO,uBAAuB,EAAEpC,OAAO,CAAC;IAC5D1F,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJmO,QAAQ,EACR;MACEb,IAAI,EAAE3D,KAAK;MACXkE,IAAI,EAAExO;KACP,EACDwN,YAAY,CAAClC,SAAS,CAACtK,OAAO,CAAC,EAC/B,IAAI,EACJ,KAAK,CACN;IACDmM,SAAS,CAAC7B,SAAS,CAACtK,OAAO,CAAC;GAC7B;EAED,MAAMmJ,OAAO,GACXnK,KAEwD;IAExD,MAAM0N,8BAA8B,GAE9BN,MAAM,CAACzI,qBAAqB,CAAC3E,KAAK,CAAC,EAAEuL,OAAO,CAAC;IACnD1F,OAAO,CAACmI,iBAAiB,CACvBrN,IAAI,EACJ,MAAM+M,8BAA8B,EACpC,EAAE,EACFF,YAAY,CAACE,8BAA8B,CAAC,EAC5C,IAAI,EACJ,KAAK,CACN;IACDP,SAAS,CAACO,8BAA8B,CAAC;GAC1C;EAEDvK,KAAK,CAACuC,SAAS,CAAC;IACdG,OAAO,CAACiD,WAAW,CAACC,MAAM,GAAG,KAAK;IAElC,IAAIlD,OAAO,CAACkB,MAAM,CAACQ,QAAQ,EAAE;MAC3B1B,OAAO,CAACc,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC,EAAE,CAAC;KACjC,MAAM;MACL,KAAK,MAAMyJ,UAAU,IAAIlJ,OAAO,CAACkB,MAAM,CAACI,KAAK,EAAE;QAC7C,IAAIxG,IAAI,CAACkE,UAAU,CAACkK,UAAU,CAAC,EAAE;UAC/BlJ,OAAO,CAACc,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC,EAAE,CAAC;UAChC;;;;IAKN,IAAIgI,SAAS,CAACtM,OAAO,EAAE;MACrB6E,OAAO,CAACmJ,cAAc,CAAC,CAACrO,IAAI,CAAC,CAAC,CAACsO,IAAI,CAAExN,MAAM;QACzC,MAAMmI,KAAK,GAAGxF,GAAG,CAAC3C,MAAM,CAAC8E,MAAM,EAAE5F,IAAI,CAAC;QAEtC,IAAIiJ,KAAK,IAAIA,KAAK,CAAC/J,IAAI,IAAI,CAACuE,GAAG,CAACyB,OAAO,CAACG,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC,EAAE;UAChEyJ,GAAG,CAACvE,OAAO,CAACG,UAAU,CAACO,MAAM,EAAE5F,IAAI,EAAEiJ,KAAK,CAAC;UAC3C/D,OAAO,CAACc,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;YAC3BiB,MAAM,EAAEV,OAAO,CAACG,UAAU,CAACO;WAC5B,CAAC;;OAEL,CAAC;;IAGJV,OAAO,CAACc,SAAS,CAACQ,KAAK,CAAC7B,IAAI,CAAC;MAC3B3E,IAAI;MACJ+G,MAAM,EAAE7B,OAAO,CAAC8B;KACjB,CAAC;IAEF9B,OAAO,CAACkB,MAAM,CAACsC,KAAK,IAClByB,YAAY,CAACjF,OAAO,CAAC0C,OAAO,EAAG1G,GAAW,IACxCA,GAAG,CAACgD,UAAU,CAACgB,OAAO,CAACkB,MAAM,CAACsC,KAAK,CAAC,CACrC;IAEHxD,OAAO,CAACkB,MAAM,CAACsC,KAAK,GAAG,EAAE;IAEzBxD,OAAO,CAAChC,eAAe,CAACyC,OAAO,IAAIT,OAAO,CAACqJ,YAAY,EAAE;GAC1D,EAAE,CAACnE,MAAM,EAAEpK,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;EAEpCpI,KAAK,CAACuC,SAAS,CAAC;IACd,CAACtB,GAAG,CAACyB,OAAO,CAAC8B,WAAW,EAAEhH,IAAI,CAAC,IAAIyJ,GAAG,CAACvE,OAAO,CAAC8B,WAAW,EAAEhH,IAAI,EAAE,EAAE,CAAC;IAErE,OAAO;MACL,IAAIkF,OAAO,CAAC8C,QAAQ,CAACX,gBAAgB,IAAIA,gBAAgB,EAAE;QACzDnC,OAAO,CAACmD,UAAU,CAACrI,IAA+B,CAAC;;KAEtD;GACF,EAAE,CAACA,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,EAAEvD,gBAAgB,CAAC,CAAC;EAE9C,OAAO;IACLyG,IAAI,EAAEtL,KAAK,CAACsK,WAAW,CAACgB,IAAI,EAAE,CAACjB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACrEoD,IAAI,EAAExL,KAAK,CAACsK,WAAW,CAACkB,IAAI,EAAE,CAACnB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACrEiB,OAAO,EAAErJ,KAAK,CAACsK,WAAW,CAACjB,SAAO,EAAE,CAACgB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IAC3EW,MAAM,EAAE/I,KAAK,CAACsK,WAAW,CAACvB,QAAM,EAAE,CAACsB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACzE8C,MAAM,EAAElL,KAAK,CAACsK,WAAW,CAACY,MAAM,EAAE,CAACb,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACzEY,MAAM,EAAEhJ,KAAK,CAACsK,WAAW,CAACtB,QAAM,EAAE,CAACqB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACzEsD,MAAM,EAAE1L,KAAK,CAACsK,WAAW,CAACoB,MAAM,EAAE,CAACrB,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IACzEpB,OAAO,EAAEhH,KAAK,CAACsK,WAAW,CAACtD,OAAO,EAAE,CAACqD,YAAY,EAAE7M,IAAI,EAAEkF,OAAO,EAAE0F,OAAO,CAAC,CAAC;IAC3ER,MAAM,EAAEA;GAKT;AACH;AC/UA,iBAAgB/K,KAAc,IAC5B,OAAOA,KAAK,KAAK,UAAU;SCELmP,WAAW,CAAIrP,IAAO;EAC5C,IAAImD,IAAS;EACb,MAAM7C,OAAO,GAAGD,KAAK,CAACC,OAAO,CAACN,IAAI,CAAC;EAEnC,IAAIA,IAAI,YAAYC,IAAI,EAAE;IACxBkD,IAAI,GAAG,IAAIlD,IAAI,CAACD,IAAI,CAAC;GACtB,MAAM,IAAIA,IAAI,YAAYsP,GAAG,EAAE;IAC9BnM,IAAI,GAAG,IAAImM,GAAG,CAACtP,IAAI,CAAC;GACrB,MAAM,IAAIM,OAAO,IAAIG,QAAQ,CAACT,IAAI,CAAC,EAAE;IACpCmD,IAAI,GAAG7C,OAAO,GAAG,EAAE,GAAG,EAAE;IACxB,KAAK,MAAMyB,GAAG,IAAI/B,IAAI,EAAE;MACtB,IAAIuP,UAAU,CAACvP,IAAI,CAAC+B,GAAG,CAAC,CAAC,EAAE;QACzBoB,IAAI,GAAGnD,IAAI;QACX;;MAEFmD,IAAI,CAACpB,GAAG,CAAC,GAAGsN,WAAW,CAACrP,IAAI,CAAC+B,GAAG,CAAC,CAAC;;GAErC,MAAM;IACL,OAAO/B,IAAI;;EAGb,OAAOmD,IAAI;AACb;SCTwBqM,aAAa;EACnC,IAAIC,UAAU,GAAkB,EAAE;EAElC,MAAMjK,IAAI,GAAItF,KAAQ;IACpB,KAAK,MAAMwP,QAAQ,IAAID,UAAU,EAAE;MACjCC,QAAQ,CAAClK,IAAI,CAACtF,KAAK,CAAC;;GAEvB;EAED,MAAMqF,SAAS,GAAImK,QAAqB;IACtCD,UAAU,CAACE,IAAI,CAACD,QAAQ,CAAC;IACzB,OAAO;MACLxK,WAAW,EAAE;QACXuK,UAAU,GAAGA,UAAU,CAACrO,MAAM,CAAEwO,CAAC,IAAKA,CAAC,KAAKF,QAAQ,CAAC;;KAExD;GACF;EAED,MAAMxK,WAAW,GAAG;IAClBuK,UAAU,GAAG,EAAE;GAChB;EAED,OAAO;IACL,IAAII,SAAS;MACX,OAAOJ,UAAU;KAClB;IACDjK,IAAI;IACJD,SAAS;IACTL;GACD;AACH;ACzCA,kBAAgBhF,KAAc,IAC5BE,iBAAiB,CAACF,KAAK,CAAC,IAAI,CAACC,YAAY,CAACD,KAAK,CAAC;SCD1B4P,SAAS,CAACC,OAAY,EAAEC,OAAY;EAC1D,IAAIC,WAAW,CAACF,OAAO,CAAC,IAAIE,WAAW,CAACD,OAAO,CAAC,EAAE;IAChD,OAAOD,OAAO,KAAKC,OAAO;;EAG5B,IAAIzP,YAAY,CAACwP,OAAO,CAAC,IAAIxP,YAAY,CAACyP,OAAO,CAAC,EAAE;IAClD,OAAOD,OAAO,CAACG,OAAO,EAAE,KAAKF,OAAO,CAACE,OAAO,EAAE;;EAGhD,MAAMC,KAAK,GAAG/L,MAAM,CAACG,IAAI,CAACwL,OAAO,CAAC;EAClC,MAAMK,KAAK,GAAGhM,MAAM,CAACG,IAAI,CAACyL,OAAO,CAAC;EAElC,IAAIG,KAAK,CAAC3L,MAAM,KAAK4L,KAAK,CAAC5L,MAAM,EAAE;IACjC,OAAO,KAAK;;EAGd,KAAK,MAAMzC,GAAG,IAAIoO,KAAK,EAAE;IACvB,MAAME,IAAI,GAAGN,OAAO,CAAChO,GAAG,CAAC;IAEzB,IAAI,CAACqO,KAAK,CAACE,QAAQ,CAACvO,GAAG,CAAC,EAAE;MACxB,OAAO,KAAK;;IAGd,IAAIA,GAAG,KAAK,KAAK,EAAE;MACjB,MAAMwO,IAAI,GAAGP,OAAO,CAACjO,GAAG,CAAC;MAEzB,IACGxB,YAAY,CAAC8P,IAAI,CAAC,IAAI9P,YAAY,CAACgQ,IAAI,CAAC,IACxC9P,QAAQ,CAAC4P,IAAI,CAAC,IAAI5P,QAAQ,CAAC8P,IAAI,CAAE,IACjClQ,KAAK,CAACC,OAAO,CAAC+P,IAAI,CAAC,IAAIhQ,KAAK,CAACC,OAAO,CAACiQ,IAAI,CAAE,GACxC,CAACT,SAAS,CAACO,IAAI,EAAEE,IAAI,CAAC,GACtBF,IAAI,KAAKE,IAAI,EACjB;QACA,OAAO,KAAK;;;;EAKlB,OAAO,IAAI;AACb;ACzCA,yBACEC,IAAW,KAOP;EACJC,UAAU,EAAE,CAACD,IAAI,IAAIA,IAAI,KAAKpO,eAAe,CAACG,QAAQ;EACtDmO,QAAQ,EAAEF,IAAI,KAAKpO,eAAe,CAACC,MAAM;EACzCsO,UAAU,EAAEH,IAAI,KAAKpO,eAAe,CAACE,QAAQ;EAC7CsO,OAAO,EAAEJ,IAAI,KAAKpO,eAAe,CAACK,GAAG;EACrCoO,SAAS,EAAEL,IAAI,KAAKpO,eAAe,CAACI;CACrC,CAAC;ACjBF,gBAAgBtC,KAAc,IAAuB,OAAOA,KAAK,KAAK,SAAS;ACE/E,kBAAgBJ,OAAqB,IACnCA,OAAO,CAACC,IAAI,KAAK,MAAM;ACHzB,oBAAgBG,KAAU,IACxBA,KAAK,YAAY4Q,WAAW;ACC9B,uBAAgBhR,OAAqB,IACnCA,OAAO,CAACC,IAAI,KAAK,iBAAiB;ACDpC,mBAAgBD,OAAqB,IACnCA,OAAO,CAACC,IAAI,KAAK,OAAO;ACE1B,gCAAgBsJ,GAAiB,IAC/B0H,YAAY,CAAC1H,GAAG,CAAC,IAAI1I,eAAe,CAAC0I,GAAG,CAAC;ACN3C,YAAe,OAAO2H,MAAM,KAAK,WAAW,IAC1C,OAAOA,MAAM,CAACF,WAAW,KAAK,WAAW,IACzC,OAAOG,QAAQ,KAAK,WAAW;ACEjC,WAAgB5H,GAAQ,IAAK6H,aAAa,CAAC7H,GAAG,CAAC,IAAI4H,QAAQ,CAACE,QAAQ,CAAC9H,GAAG,CAAC;ACGzE,SAAS+H,OAAO,CAAC7G,MAAW,EAAE8G,UAA+B;EAC3D,MAAM7M,MAAM,GAAG6M,UAAU,CAAC/E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC9H,MAAM;EAC7C,IAAIgG,KAAK,GAAG,CAAC;EAEb,OAAOA,KAAK,GAAGhG,MAAM,EAAE;IACrB+F,MAAM,GAAGvI,WAAW,CAACuI,MAAM,CAAC,GAAGC,KAAK,EAAE,GAAGD,MAAM,CAAC8G,UAAU,CAAC7G,KAAK,EAAE,CAAC,CAAC;;EAGtE,OAAOD,MAAM;AACf;SAEwB+G,KAAK,CAAC/G,MAAW,EAAE9I,IAAY;EACrD,MAAM4P,UAAU,GAAG3G,KAAK,CAACjJ,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC,GAAGkJ,YAAY,CAAClJ,IAAI,CAAC;EAC5D,MAAM8P,WAAW,GACfF,UAAU,CAAC7M,MAAM,IAAI,CAAC,GAAG+F,MAAM,GAAG6G,OAAO,CAAC7G,MAAM,EAAE8G,UAAU,CAAC;EAC/D,MAAMtP,GAAG,GAAGsP,UAAU,CAACA,UAAU,CAAC7M,MAAM,GAAG,CAAC,CAAC;EAC7C,IAAIgN,cAAc;EAElB,IAAID,WAAW,EAAE;IACf,OAAOA,WAAW,CAACxP,GAAG,CAAC;;EAGzB,KAAK,IAAI0P,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAAC/E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC9H,MAAM,EAAEiN,CAAC,EAAE,EAAE;IACvD,IAAIjH,KAAK,GAAG,CAAC,CAAC;IACd,IAAIkH,SAAS;IACb,MAAMC,YAAY,GAAGN,UAAU,CAAC/E,KAAK,CAAC,CAAC,EAAE,EAAEmF,CAAC,GAAG,CAAC,CAAC,CAAC;IAClD,MAAMG,kBAAkB,GAAGD,YAAY,CAACnN,MAAM,GAAG,CAAC;IAElD,IAAIiN,CAAC,GAAG,CAAC,EAAE;MACTD,cAAc,GAAGjH,MAAM;;IAGzB,OAAO,EAAEC,KAAK,GAAGmH,YAAY,CAACnN,MAAM,EAAE;MACpC,MAAMqN,IAAI,GAAGF,YAAY,CAACnH,KAAK,CAAC;MAChCkH,SAAS,GAAGA,SAAS,GAAGA,SAAS,CAACG,IAAI,CAAC,GAAGtH,MAAM,CAACsH,IAAI,CAAC;MAEtD,IACED,kBAAkB,KAAKpH,KAAK,KAC1B/J,QAAQ,CAACiR,SAAS,CAAC,IAAIhN,aAAa,CAACgN,SAAS,CAAC,IAC9CrR,KAAK,CAACC,OAAO,CAACoR,SAAS,CAAC,IACvB,CAACA,SAAS,CAACtQ,MAAM,CACdpB,IAAI,IACFS,QAAQ,CAACT,IAAI,CAAC,IAAI,CAAC0E,aAAa,CAAC1E,IAAI,CAAC,IAAK8R,SAAS,CAAC9R,IAAI,CAAC,CAC9D,CAACwE,MAAO,CAAC,EACd;QACAgN,cAAc,GAAG,OAAOA,cAAc,CAACK,IAAI,CAAC,GAAG,OAAOtH,MAAM,CAACsH,IAAI,CAAC;;MAGpEL,cAAc,GAAGE,SAAS;;;EAI9B,OAAOnH,MAAM;AACf;ACrDA,MAAMwH,aAAa,GAAwB;EACzC7R,KAAK,EAAE,KAAK;EACZsG,OAAO,EAAE;CACV;AAED,MAAMwL,WAAW,GAAG;EAAE9R,KAAK,EAAE,IAAI;EAAEsG,OAAO,EAAE;AAAI,CAAE;AAElD,uBAAgB4E,OAA4B;EAC1C,IAAI/K,KAAK,CAACC,OAAO,CAAC8K,OAAO,CAAC,EAAE;IAC1B,IAAIA,OAAO,CAAC5G,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMoD,MAAM,GAAGwD,OAAO,CACnBhK,MAAM,CAAE6Q,MAAM,IAAKA,MAAM,IAAIA,MAAM,CAACrR,OAAO,IAAI,CAACqR,MAAM,CAAC5M,QAAQ,CAAC,CAChEkC,GAAG,CAAE0K,MAAM,IAAKA,MAAM,CAAC/R,KAAK,CAAC;MAChC,OAAO;QAAEA,KAAK,EAAE0H,MAAM;QAAEpB,OAAO,EAAE,CAAC,CAACoB,MAAM,CAACpD;MAAM,CAAE;;IAGpD,OAAO4G,OAAO,CAAC,CAAC,CAAC,CAACxK,OAAO,IAAI,CAACwK,OAAO,CAAC,CAAC,CAAC,CAAC/F,QAAQ;;IAE7C+F,OAAO,CAAC,CAAC,CAAC,CAAC8G,UAAU,IAAI,CAAClQ,WAAW,CAACoJ,OAAO,CAAC,CAAC,CAAC,CAAC8G,UAAU,CAAChS,KAAK,CAAC,GAChE8B,WAAW,CAACoJ,OAAO,CAAC,CAAC,CAAC,CAAClL,KAAK,CAAC,IAAIkL,OAAO,CAAC,CAAC,CAAC,CAAClL,KAAK,KAAK,EAAE,GACtD8R,WAAW,GACX;MAAE9R,KAAK,EAAEkL,OAAO,CAAC,CAAC,CAAC,CAAClL,KAAK;MAAEsG,OAAO,EAAE;IAAI,CAAE,GAC5CwL,WAAW,GACbD,aAAa;;EAGnB,OAAOA,aAAa;AACtB,CAAC;AC/BD,sBAAe,CACb7R,KAAU;EAAA,IACV;IAAEiS,aAAa;IAAEC,WAAW;IAAEC;EAAU,CAAe;EAAA,OAEvDrQ,WAAW,CAAC9B,KAAK,CAAC,GACdA,KAAK,GACLiS,aAAa,GACbjS,KAAK,KAAK,EAAE,GACVoS,GAAG,GACH,CAACpS,KAAK,GACRkS,WAAW,GACX,IAAInS,IAAI,CAACC,KAAK,CAAC,GACfmS,UAAU,GACVA,UAAU,CAACnS,KAAK,CAAC,GACjBA,KAAK;AAAA;ACZX,MAAMqS,aAAa,GAAqB;EACtC/L,OAAO,EAAE,KAAK;EACdtG,KAAK,EAAE;CACR;AAED,oBAAgBkL,OAA4B,IAC1C/K,KAAK,CAACC,OAAO,CAAC8K,OAAO,CAAC,GAClBA,OAAO,CAACtJ,MAAM,CACZ,CAAC0Q,QAAQ,EAAEP,MAAM,KACfA,MAAM,IAAIA,MAAM,CAACrR,OAAO,IAAI,CAACqR,MAAM,CAAC5M,QAAQ,GACxC;EACEmB,OAAO,EAAE,IAAI;EACbtG,KAAK,EAAE+R,MAAM,CAAC/R;CACf,GACDsS,QAAQ,EACdD,aAAa,CACd,GACDA,aAAa;SCXKE,aAAa,CAAC/J,EAAe;EACnD,MAAMW,GAAG,GAAGX,EAAE,CAACW,GAAG;EAElB,IAAIX,EAAE,CAACyC,IAAI,GAAGzC,EAAE,CAACyC,IAAI,CAACuH,KAAK,CAAErJ,GAAG,IAAKA,GAAG,CAAChE,QAAQ,CAAC,GAAGgE,GAAG,CAAChE,QAAQ,EAAE;IACjE;;EAGF,IAAIsN,WAAW,CAACtJ,GAAG,CAAC,EAAE;IACpB,OAAOA,GAAG,CAACuJ,KAAK;;EAGlB,IAAI7B,YAAY,CAAC1H,GAAG,CAAC,EAAE;IACrB,OAAOwJ,aAAa,CAACnK,EAAE,CAACyC,IAAI,CAAC,CAACjL,KAAK;;EAGrC,IAAI4S,gBAAgB,CAACzJ,GAAG,CAAC,EAAE;IACzB,OAAO,CAAC,GAAGA,GAAG,CAAC0J,eAAe,CAAC,CAACxL,GAAG,CAAC;MAAA,IAAC;QAAErH;MAAK,CAAE;MAAA,OAAKA,KAAK;IAAA,EAAC;;EAG3D,IAAI8S,eAAU,CAAC3J,GAAG,CAAC,EAAE;IACnB,OAAO4J,gBAAgB,CAACvK,EAAE,CAACyC,IAAI,CAAC,CAACjL,KAAK;;EAGxC,OAAOgT,eAAe,CAAClR,WAAW,CAACqH,GAAG,CAACnJ,KAAK,CAAC,GAAGwI,EAAE,CAACW,GAAG,CAACnJ,KAAK,GAAGmJ,GAAG,CAACnJ,KAAK,EAAEwI,EAAE,CAAC;AAC/E;ACzBA,yBAAe,CACbwC,WAAyD,EACzDzC,OAAkB,EAClB0K,YAA2B,EAC3BC,yBAA+C;EAE/C,MAAMnI,MAAM,GAA2C,EAAE;EAEzD,KAAK,MAAMpK,IAAI,IAAIqK,WAAW,EAAE;IAC9B,MAAM1C,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IAEvC2H,KAAK,IAAI8B,GAAG,CAACW,MAAM,EAAEpK,IAAI,EAAE2H,KAAK,CAACE,EAAE,CAAC;;EAGtC,OAAO;IACLyK,YAAY;IACZnS,KAAK,EAAE,CAAC,GAAGkK,WAAW,CAA8B;IACpDD,MAAM;IACNmI;GACD;AACH,CAAC;AC5BD,oBAAgBhI,OAAoB,IAClCA,OAAO,CAACzC,KAAK,KACZyC,OAAO,CAACpI,QAAQ,IACfoI,OAAO,CAACxI,GAAG,IACXwI,OAAO,CAACzI,GAAG,IACXyI,OAAO,CAACvI,SAAS,IACjBuI,OAAO,CAACtI,SAAS,IACjBsI,OAAO,CAACrI,OAAO,IACfqI,OAAO,CAACnI,QAAQ,CAAC;SCNGoQ,iBAAiB,CACvC5M,MAAmB,EACnBgC,OAAoB,EACpB5H,IAAY;EAKZ,MAAMiJ,KAAK,GAAGxF,GAAG,CAACmC,MAAM,EAAE5F,IAAI,CAAC;EAE/B,IAAIiJ,KAAK,IAAIY,KAAK,CAAC7J,IAAI,CAAC,EAAE;IACxB,OAAO;MACLiJ,KAAK;MACLjJ;KACD;;EAGH,MAAMG,KAAK,GAAGH,IAAI,CAACgB,KAAK,CAAC,GAAG,CAAC;EAE7B,OAAOb,KAAK,CAACwD,MAAM,EAAE;IACnB,MAAMgD,SAAS,GAAGxG,KAAK,CAACsS,IAAI,CAAC,GAAG,CAAC;IACjC,MAAM9K,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAEjB,SAAS,CAAC;IACrC,MAAM+L,UAAU,GAAGjP,GAAG,CAACmC,MAAM,EAAEe,SAAS,CAAC;IAEzC,IAAIgB,KAAK,IAAI,CAACnI,KAAK,CAACC,OAAO,CAACkI,KAAK,CAAC,IAAI3H,IAAI,KAAK2G,SAAS,EAAE;MACxD,OAAO;QAAE3G;MAAI,CAAE;;IAGjB,IAAI0S,UAAU,IAAIA,UAAU,CAACxT,IAAI,EAAE;MACjC,OAAO;QACLc,IAAI,EAAE2G,SAAS;QACfsC,KAAK,EAAEyJ;OACR;;IAGHvS,KAAK,CAACwS,GAAG,EAAE;;EAGb,OAAO;IACL3S;GACD;AACH;SC1CgB4S,SAAS,CAGvB/S,MAAS,EAAEwC,MAAS;EACpB,IAAI+M,WAAW,CAACvP,MAAM,CAAC,IAAIuP,WAAW,CAAC/M,MAAM,CAAC,EAAE;IAC9C,OAAOA,MAAM;;EAGf,KAAK,MAAMnB,GAAG,IAAImB,MAAM,EAAE;IACxB,MAAMwQ,WAAW,GAAGhT,MAAM,CAACqB,GAAG,CAAC;IAC/B,MAAM4R,WAAW,GAAGzQ,MAAM,CAACnB,GAAG,CAAC;IAE/B,IAAI;MACFrB,MAAM,CAACqB,GAAG,CAAC,GACRtB,QAAQ,CAACiT,WAAW,CAAC,IAAIjT,QAAQ,CAACkT,WAAW,CAAC,IAC9CtT,KAAK,CAACC,OAAO,CAACoT,WAAW,CAAC,IAAIrT,KAAK,CAACC,OAAO,CAACqT,WAAW,CAAE,GACtDF,SAAS,CAACC,WAAW,EAAEC,WAAW,CAAC,GACnCA,WAAW;KAClB,CAAC,WAAM;;EAGV,OAAOjT,MAAM;AACf;ACnBA,SAASkT,cAAc,CAKrBhM,MAAS,EACTiM,aAAgB,EAChBxN,WAA2C,EAC3CyN,UAAc,EACdC,UAAoB;EAEpB,IAAIvJ,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAG5C,MAAM,CAACpD,MAAM,EAAE;IAC9B,KAAK,MAAMzC,GAAG,IAAI6F,MAAM,CAAC4C,KAAK,CAAC,EAAE;MAC/B,IAAInK,KAAK,CAACC,OAAO,CAACsH,MAAM,CAAC4C,KAAK,CAAC,CAACzI,GAAG,CAAC,CAAC,EAAE;QACrC,CAACsE,WAAW,CAACmE,KAAK,CAAC,KAAKnE,WAAW,CAACmE,KAAK,CAAC,GAAG,EAAE,CAAC;QAChDnE,WAAW,CAACmE,KAAK,CAAC,CAACzI,GAAG,CAAC,GAAG,EAAE;QAC5B6R,cAAc,CACZhM,MAAM,CAAC4C,KAAK,CAAC,CAACzI,GAAG,CAAM,EACvBuC,GAAG,CAACuP,aAAa,CAACrJ,KAAK,CAAC,IAAI,EAAE,EAAEzI,GAAG,EAAE,EAAE,CAAC,EACxCsE,WAAW,CAACmE,KAAK,CAAC,CAACzI,GAAG,CAAO,EAC7BsE,WAAW,CAACmE,KAAK,CAAC,EAClBzI,GAAG,CACJ;OACF,MAAM;QACL,CAAC3B,iBAAiB,CAACyT,aAAa,CAAC,IACjC/D,SAAS,CAACxL,GAAG,CAACuP,aAAa,CAACrJ,KAAK,CAAC,IAAI,EAAE,EAAEzI,GAAG,CAAC,EAAE6F,MAAM,CAAC4C,KAAK,CAAC,CAACzI,GAAG,CAAC,CAAC,GAC/DuI,GAAG,CAACjE,WAAW,CAACmE,KAAK,CAAC,IAAI,EAAE,EAAEzI,GAAG,CAAC,GACjCsE,WAAW,CAACmE,KAAK,CAAC,mCACdnE,WAAW,CAACmE,KAAK,CAAC;UACrB,CAACzI,GAAG,GAAG;QAAI,EACX;;;IAIV+R,UAAU,IACR,CAACzN,WAAW,CAAC7B,MAAM,IACnB,OAAOsP,UAAU,CAACC,UAAqB,CAAC;;EAG5C,OAAO1N,WAAW;AACpB;AAEA,+BAAe,CACbuB,MAAS,EACTiM,aAAgB,EAChBxN,WAA2C,KAE3CoN,SAAS,CACPG,cAAc,CAAChM,MAAM,EAAEiM,aAAa,EAAExN,WAAW,CAACiG,KAAK,CAAC,CAAC,EAAE1E,MAAM,CAACpD,MAAM,CAAC,CAAC,EAC1EoP,cAAc,CAACC,aAAa,EAAEjM,MAAM,EAAEvB,WAAW,CAACiG,KAAK,CAAC,CAAC,EAAE1E,MAAM,CAACpD,MAAM,CAAC,CAAC,CAC3E;AC1DH,qBAAe,CACbwP,WAAoB,EACpBnK,SAAkB,EAClBoK,WAAoB,EACpBC,cAGC,EACD1D,IAME;EAEF,IAAIA,IAAI,CAACI,OAAO,EAAE;IAChB,OAAO,KAAK;GACb,MAAM,IAAI,CAACqD,WAAW,IAAIzD,IAAI,CAACK,SAAS,EAAE;IACzC,OAAO,EAAEhH,SAAS,IAAImK,WAAW,CAAC;GACnC,MAAM,IAAIC,WAAW,GAAGC,cAAc,CAACxD,QAAQ,GAAGF,IAAI,CAACE,QAAQ,EAAE;IAChE,OAAO,CAACsD,WAAW;GACpB,MAAM,IAAIC,WAAW,GAAGC,cAAc,CAACvD,UAAU,GAAGH,IAAI,CAACG,UAAU,EAAE;IACpE,OAAOqD,WAAW;;EAEpB,OAAO,IAAI;AACb,CAAC;ACtBD,sBAAe,CAAI3K,GAAM,EAAExI,IAAY,KACrC,CAACe,OAAO,CAAC0C,GAAG,CAAC+E,GAAG,EAAExI,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC2D,MAAM,IAAI8M,KAAK,CAACjI,GAAG,EAAExI,IAAI,CAAC;ACAzD,gBAAgBX,KAAc,IAC5BkH,QAAQ,CAAClH,KAAK,CAAC,IAAImD,KAAK,CAAC8Q,cAAc,CAACjU,KAAoB,CAAC;ACN/D,cAAgBA,KAAc,IAAsBA,KAAK,YAAYkU,MAAM;SCInDC,gBAAgB,CACtC1S,MAAsB,EACtB0H,GAAQ,EACS;EAAA,IAAjBtJ,IAAI,uEAAG,UAAU;EAEjB,IACEuU,SAAS,CAAC3S,MAAM,CAAC,IAChBtB,KAAK,CAACC,OAAO,CAACqB,MAAM,CAAC,IAAIA,MAAM,CAAC+Q,KAAK,CAAC4B,SAAS,CAAE,IACjDxC,SAAS,CAACnQ,MAAM,CAAC,IAAI,CAACA,MAAO,EAC9B;IACA,OAAO;MACL5B,IAAI;MACJ0J,OAAO,EAAE6K,SAAS,CAAC3S,MAAM,CAAC,GAAGA,MAAM,GAAG,EAAE;MACxC0H;KACD;;AAEL;AChBA,yBAAgBkL,cAA+B,IAC7C9T,QAAQ,CAAC8T,cAAc,CAAC,IAAI,CAACC,OAAO,CAACD,cAAc,CAAC,GAChDA,cAAc,GACd;EACErU,KAAK,EAAEqU,cAAc;EACrB9K,OAAO,EAAE;CACV;ACUP,oBAAe,OACbjB,KAAY,EACZiM,UAAe,EACfxK,wBAAiC,EACjCmJ,yBAAmC;EAEnC,MAAM;IACJ/J,GAAG;IACH8B,IAAI;IACJnI,QAAQ;IACRH,SAAS;IACTC,SAAS;IACTF,GAAG;IACHD,GAAG;IACHI,OAAO;IACPE,QAAQ;IACRpC,IAAI;IACJsR,aAAa;IACbxJ,KAAK;IACLtD;EAAQ,CACT,GAAGmD,KAAK,CAACE,EAAE;EACZ,IAAI,CAACC,KAAK,IAAItD,QAAQ,EAAE;IACtB,OAAO,EAAE;;EAEX,MAAMqP,QAAQ,GAAqBvJ,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAI9B,GAAwB;EAC7E,MAAMsL,gBAAgB,GAAIlL,OAA0B;IAClD,IAAI2J,yBAAyB,IAAIsB,QAAQ,CAAChL,cAAc,EAAE;MACxDgL,QAAQ,CAAClL,iBAAiB,CAACsI,SAAS,CAACrI,OAAO,CAAC,GAAG,EAAE,GAAGA,OAAO,IAAI,GAAG,CAAC;MACpEiL,QAAQ,CAAChL,cAAc,EAAE;;GAE5B;EACD,MAAMI,KAAK,GAAwB,EAAE;EACrC,MAAM8K,OAAO,GAAG7D,YAAY,CAAC1H,GAAG,CAAC;EACjC,MAAM2J,UAAU,GAAGrS,eAAe,CAAC0I,GAAG,CAAC;EACvC,MAAMwL,iBAAiB,GAAGD,OAAO,IAAI5B,UAAU;EAC/C,MAAM8B,OAAO,GACV,CAAC3C,aAAa,IAAIQ,WAAW,CAACtJ,GAAG,CAAC,KAAK,CAACA,GAAG,CAACnJ,KAAK,IAClDuU,UAAU,KAAK,EAAE,IAChBpU,KAAK,CAACC,OAAO,CAACmU,UAAU,CAAC,IAAI,CAACA,UAAU,CAACjQ,MAAO;EACnD,MAAMuQ,iBAAiB,GAAGC,YAAY,CAACC,IAAI,CACzC,IAAI,EACJpU,IAAI,EACJoJ,wBAAwB,EACxBH,KAAK,CACN;EACD,MAAMoL,gBAAgB,GAAG,UACvBC,SAAkB,EAClBC,gBAAyB,EACzBC,gBAAyB,EAEiB;IAAA,IAD1CC,OAAO,uEAAG5S,sBAAsB,CAACG,SAAS;IAAA,IAC1C0S,OAAO,uEAAG7S,sBAAsB,CAACI,SAAS;IAE1C,MAAM2G,OAAO,GAAG0L,SAAS,GAAGC,gBAAgB,GAAGC,gBAAgB;IAC/DvL,KAAK,CAACjJ,IAAI,CAAC;MACTd,IAAI,EAAEoV,SAAS,GAAGG,OAAO,GAAGC,OAAO;MACnC9L,OAAO;MACPJ;IAAG,GACA0L,iBAAiB,CAACI,SAAS,GAAGG,OAAO,GAAGC,OAAO,EAAE9L,OAAO,CAAC,CAC7D;GACF;EAED,IACEzG,QAAQ,KACN,CAAC6R,iBAAiB,KAAKC,OAAO,IAAI1U,iBAAiB,CAACqU,UAAU,CAAC,CAAC,IAC/D3C,SAAS,CAAC2C,UAAU,CAAC,IAAI,CAACA,UAAW,IACrCzB,UAAU,IAAI,CAACC,gBAAgB,CAAC9H,IAAI,CAAC,CAAC3E,OAAQ,IAC9CoO,OAAO,IAAI,CAAC/B,aAAa,CAAC1H,IAAI,CAAC,CAAC3E,OAAQ,CAAC,EAC5C;IACA,MAAM;MAAEtG,KAAK;MAAEuJ;IAAO,CAAE,GAAG6K,SAAS,CAACtR,QAAQ,CAAC,GAC1C;MAAE9C,KAAK,EAAE,CAAC,CAAC8C,QAAQ;MAAEyG,OAAO,EAAEzG;IAAQ,CAAE,GACxCwS,kBAAkB,CAACxS,QAAQ,CAAC;IAEhC,IAAI9C,KAAK,EAAE;MACT4J,KAAK,CAACjJ,IAAI,CAAC;QACTd,IAAI,EAAE2C,sBAAsB,CAACM,QAAQ;QACrCyG,OAAO;QACPJ,GAAG,EAAEqL;MAAQ,GACVK,iBAAiB,CAACrS,sBAAsB,CAACM,QAAQ,EAAEyG,OAAO,CAAC,CAC/D;MACD,IAAI,CAACQ,wBAAwB,EAAE;QAC7B0K,gBAAgB,CAAClL,OAAO,CAAC;QACzB,OAAOK,KAAK;;;;EAKlB,IAAI,CAACgL,OAAO,KAAK,CAAC1U,iBAAiB,CAACwC,GAAG,CAAC,IAAI,CAACxC,iBAAiB,CAACuC,GAAG,CAAC,CAAC,EAAE;IACpE,IAAIwS,SAAS;IACb,IAAIM,SAAS;IACb,MAAMC,SAAS,GAAGF,kBAAkB,CAAC7S,GAAG,CAAC;IACzC,MAAMgT,SAAS,GAAGH,kBAAkB,CAAC5S,GAAG,CAAC;IAEzC,IAAI,CAACmI,KAAK,CAAC0J,UAAU,CAAC,EAAE;MACtB,MAAMmB,WAAW,GACdvM,GAAwB,CAAC8I,aAAa,IAAI0D,UAAU,CAACpB,UAAU,CAAC;MACnE,IAAI,CAACrU,iBAAiB,CAACsV,SAAS,CAACxV,KAAK,CAAC,EAAE;QACvCiV,SAAS,GAAGS,WAAW,GAAGF,SAAS,CAACxV,KAAK;;MAE3C,IAAI,CAACE,iBAAiB,CAACuV,SAAS,CAACzV,KAAK,CAAC,EAAE;QACvCuV,SAAS,GAAGG,WAAW,GAAGD,SAAS,CAACzV,KAAK;;KAE5C,MAAM;MACL,MAAM4V,SAAS,GACZzM,GAAwB,CAAC+I,WAAW,IAAI,IAAInS,IAAI,CAACwU,UAAU,CAAC;MAC/D,IAAIrN,QAAQ,CAACsO,SAAS,CAACxV,KAAK,CAAC,EAAE;QAC7BiV,SAAS,GAAGW,SAAS,GAAG,IAAI7V,IAAI,CAACyV,SAAS,CAACxV,KAAK,CAAC;;MAEnD,IAAIkH,QAAQ,CAACuO,SAAS,CAACzV,KAAK,CAAC,EAAE;QAC7BuV,SAAS,GAAGK,SAAS,GAAG,IAAI7V,IAAI,CAAC0V,SAAS,CAACzV,KAAK,CAAC;;;IAIrD,IAAIiV,SAAS,IAAIM,SAAS,EAAE;MAC1BP,gBAAgB,CACd,CAAC,CAACC,SAAS,EACXO,SAAS,CAACjM,OAAO,EACjBkM,SAAS,CAAClM,OAAO,EACjB/G,sBAAsB,CAACC,GAAG,EAC1BD,sBAAsB,CAACE,GAAG,CAC3B;MACD,IAAI,CAACqH,wBAAwB,EAAE;QAC7B0K,gBAAgB,CAAC7K,KAAK,CAACjJ,IAAI,CAAE,CAAC4I,OAAO,CAAC;QACtC,OAAOK,KAAK;;;;EAKlB,IAAI,CAACjH,SAAS,IAAIC,SAAS,KAAK,CAACgS,OAAO,IAAI1N,QAAQ,CAACqN,UAAU,CAAC,EAAE;IAChE,MAAMsB,eAAe,GAAGP,kBAAkB,CAAC3S,SAAS,CAAC;IACrD,MAAMmT,eAAe,GAAGR,kBAAkB,CAAC1S,SAAS,CAAC;IACrD,MAAMqS,SAAS,GACb,CAAC/U,iBAAiB,CAAC2V,eAAe,CAAC7V,KAAK,CAAC,IACzCuU,UAAU,CAACjQ,MAAM,GAAGuR,eAAe,CAAC7V,KAAK;IAC3C,MAAMuV,SAAS,GACb,CAACrV,iBAAiB,CAAC4V,eAAe,CAAC9V,KAAK,CAAC,IACzCuU,UAAU,CAACjQ,MAAM,GAAGwR,eAAe,CAAC9V,KAAK;IAE3C,IAAIiV,SAAS,IAAIM,SAAS,EAAE;MAC1BP,gBAAgB,CACdC,SAAS,EACTY,eAAe,CAACtM,OAAO,EACvBuM,eAAe,CAACvM,OAAO,CACxB;MACD,IAAI,CAACQ,wBAAwB,EAAE;QAC7B0K,gBAAgB,CAAC7K,KAAK,CAACjJ,IAAI,CAAE,CAAC4I,OAAO,CAAC;QACtC,OAAOK,KAAK;;;;EAKlB,IAAI/G,OAAO,IAAI,CAAC+R,OAAO,IAAI1N,QAAQ,CAACqN,UAAU,CAAC,EAAE;IAC/C,MAAM;MAAEvU,KAAK,EAAE+V,YAAY;MAAExM;IAAO,CAAE,GAAG+L,kBAAkB,CAACzS,OAAO,CAAC;IAEpE,IAAIyR,OAAO,CAACyB,YAAY,CAAC,IAAI,CAACxB,UAAU,CAACyB,KAAK,CAACD,YAAY,CAAC,EAAE;MAC5DnM,KAAK,CAACjJ,IAAI,CAAC;QACTd,IAAI,EAAE2C,sBAAsB,CAACK,OAAO;QACpC0G,OAAO;QACPJ;MAAG,GACA0L,iBAAiB,CAACrS,sBAAsB,CAACK,OAAO,EAAE0G,OAAO,CAAC,CAC9D;MACD,IAAI,CAACQ,wBAAwB,EAAE;QAC7B0K,gBAAgB,CAAClL,OAAO,CAAC;QACzB,OAAOK,KAAK;;;;EAKlB,IAAI7G,QAAQ,EAAE;IACZ,IAAIsM,UAAU,CAACtM,QAAQ,CAAC,EAAE;MACxB,MAAMtB,MAAM,GAAG,MAAMsB,QAAQ,CAACwR,UAAU,CAAC;MACzC,MAAM0B,aAAa,GAAG9B,gBAAgB,CAAC1S,MAAM,EAAE+S,QAAQ,CAAC;MAExD,IAAIyB,aAAa,EAAE;QACjBrM,KAAK,CAACjJ,IAAI,CAAC,mCACNsV,aAAa,GACbpB,iBAAiB,CAClBrS,sBAAsB,CAACO,QAAQ,EAC/BkT,aAAa,CAAC1M,OAAO,CACtB,CACF;QACD,IAAI,CAACQ,wBAAwB,EAAE;UAC7B0K,gBAAgB,CAACwB,aAAa,CAAC1M,OAAO,CAAC;UACvC,OAAOK,KAAK;;;KAGjB,MAAM,IAAIrJ,QAAQ,CAACwC,QAAQ,CAAC,EAAE;MAC7B,IAAImT,gBAAgB,GAAG,EAAgB;MAEvC,KAAK,MAAMrU,GAAG,IAAIkB,QAAQ,EAAE;QAC1B,IAAI,CAACyB,aAAa,CAAC0R,gBAAgB,CAAC,IAAI,CAACnM,wBAAwB,EAAE;UACjE;;QAGF,MAAMkM,aAAa,GAAG9B,gBAAgB,CACpC,MAAMpR,QAAQ,CAAClB,GAAG,CAAC,CAAC0S,UAAU,CAAC,EAC/BC,QAAQ,EACR3S,GAAG,CACJ;QAED,IAAIoU,aAAa,EAAE;UACjBC,gBAAgB,mCACXD,aAAa,GACbpB,iBAAiB,CAAChT,GAAG,EAAEoU,aAAa,CAAC1M,OAAO,CAAC,CACjD;UAEDkL,gBAAgB,CAACwB,aAAa,CAAC1M,OAAO,CAAC;UAEvC,IAAIQ,wBAAwB,EAAE;YAC5BH,KAAK,CAACjJ,IAAI,CAAC,GAAGuV,gBAAgB;;;;MAKpC,IAAI,CAAC1R,aAAa,CAAC0R,gBAAgB,CAAC,EAAE;QACpCtM,KAAK,CAACjJ,IAAI,CAAC;UACTwI,GAAG,EAAEqL;QAAQ,GACV0B,gBAAgB,CACpB;QACD,IAAI,CAACnM,wBAAwB,EAAE;UAC7B,OAAOH,KAAK;;;;;EAMpB6K,gBAAgB,CAAC,IAAI,CAAC;EACtB,OAAO7K,KAAK;AACd,CAAC;ACrKD,MAAMuM,cAAc,GAAG;EACrB7F,IAAI,EAAEpO,eAAe,CAACG,QAAQ;EAC9B2R,cAAc,EAAE9R,eAAe,CAACE,QAAQ;EACxCgU,gBAAgB,EAAE;CACV;AAEV,MAAMC,iBAAiB,GAAG,OAAOvF,MAAM,KAAK,WAAW;SAEvCwF,iBAAiB,GAIiB;EAAA,IAAhD9S,4EAA8C,EAAE;EAEhD,IAAImF,QAAQ,mCACPwN,cAAc,GACd3S,KAAK,CACT;EACD,IAAIwC,UAAU,GAA4B;IACxCE,OAAO,EAAE,KAAK;IACdG,YAAY,EAAE,KAAK;IACnBF,WAAW,EAAE,EAA2C;IACxD4N,WAAW,EAAE,KAAK;IAClBwC,WAAW,EAAE,CAAC;IACdnQ,aAAa,EAAE,EAA2C;IAC1DoQ,YAAY,EAAE,KAAK;IACnBC,kBAAkB,EAAE,KAAK;IACzBnQ,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT;EACD,IAAIgC,OAAO,GAAG,EAAE;EAChB,IAAIN,cAAc,GAAGU,QAAQ,CAACgL,aAAa,IAAI,EAAE;EACjD,IAAIhM,WAAW,GAAGgB,QAAQ,CAACX,gBAAgB,GACvC,EAAE,GACFmH,WAAW,CAAClH,cAAc,CAAC;EAC/B,IAAIa,WAAW,GAAG;IAChBC,MAAM,EAAE,KAAK;IACbN,KAAK,EAAE,KAAK;IACZtB,KAAK,EAAE;GACR;EACD,IAAIJ,MAAM,GAAU;IAClB0B,KAAK,EAAE,IAAI2G,GAAG,EAAE;IAChBsH,OAAO,EAAE,IAAItH,GAAG,EAAE;IAClBvG,KAAK,EAAE,IAAIuG,GAAG,EAAE;IAChBjI,KAAK,EAAE,IAAIiI,GAAG;GACN;EACV,IAAIuH,kBAAiC;EACrC,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,cAAc,GAAsC,EAAE;EAC1D,MAAMhT,eAAe,GAAG;IACtBqC,OAAO,EAAE,KAAK;IACdC,WAAW,EAAE,KAAK;IAClBC,aAAa,EAAE,KAAK;IACpBC,YAAY,EAAE,KAAK;IACnBC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT;EACD,MAAMI,SAAS,GAA2B;IACxCQ,KAAK,EAAEmI,aAAa,EAAE;IACtBzG,KAAK,EAAEyG,aAAa,EAAE;IACtB1I,KAAK,EAAE0I,aAAa;GACrB;EAED,MAAMwH,0BAA0B,GAAGC,kBAAkB,CAACpO,QAAQ,CAAC2H,IAAI,CAAC;EACpE,MAAM0G,yBAAyB,GAAGD,kBAAkB,CAACpO,QAAQ,CAACqL,cAAc,CAAC;EAC7E,MAAMiD,gCAAgC,GACpCtO,QAAQ,CAACsK,YAAY,KAAK/Q,eAAe,CAACK,GAAG;EAE/C,MAAM2U,QAAQ,GACZ,CAAqB3R,QAAW,EAAE4R,IAAY,KAC9C,YAAa;IAAA,kCAATC,IAAS;MAATA,IAAS;IAAA;IACXC,YAAY,CAACT,KAAK,CAAC;IACnBA,KAAK,GAAG9F,MAAM,CAACwG,UAAU,CAAC,MAAM/R,QAAQ,CAAC,GAAG6R,IAAI,CAAC,EAAED,IAAI,CAAC;GACzD;EAEH,MAAMI,cAAc,GAAG,CACrB5W,IAA6B,EAC7BmT,WAAqB,KAErB,CAACA,WAAW,KACX/M,MAAM,CAACQ,QAAQ,IACdR,MAAM,CAACI,KAAK,CAACqQ,GAAG,CAAC7W,IAAI,CAAC,IACtBoG,MAAM,CAACI,KAAK,CAACqQ,GAAG,CAAC,CAAC7W,IAAI,CAACqV,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;EAEnD,MAAM9G,YAAY,GAAG,MAAOuI,gBAA0B;IACpD,IAAInR,OAAO,GAAG,KAAK;IAEnB,IAAIzC,eAAe,CAACyC,OAAO,EAAE;MAC3BA,OAAO,GAAGqC,QAAQ,CAAC+O,QAAQ,GACvBlT,aAAa,CAAC,CAAC,MAAMwK,cAAc,EAAE,EAAEzI,MAAM,CAAC,GAC9C,MAAMoR,wBAAwB,CAACpP,OAAO,EAAE,IAAI,CAAC;MAEjD,IAAI,CAACkP,gBAAgB,IAAInR,OAAO,KAAKN,UAAU,CAACM,OAAO,EAAE;QACvDN,UAAU,CAACM,OAAO,GAAGA,OAAO;QAC5BK,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;UACnBgB;SACD,CAAC;;;IAIN,OAAOA,OAAO;GACf;EAED,MAAM0H,iBAAiB,GAA0B,UAC/CrN,IAAI,EACJiX,MAAM,EACNR,IAAI,EAGkB;IAAA,IAFtB1P,MAAM,uEAAG,EAAE;IAAA,IACXmQ,eAAe,uEAAG,IAAI;IAAA,IACtBC,eAAe,uEAAG,IAAI;IAEtBhP,WAAW,CAACC,MAAM,GAAG,IAAI;IAEzB,IAAI+O,eAAe,IAAI1T,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC,EAAE;MACzC,MAAM8G,WAAW,GAAGmQ,MAAM,CAACxT,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC,EAAEyW,IAAI,CAACnJ,IAAI,EAAEmJ,IAAI,CAAC5I,IAAI,CAAC;MACpEqJ,eAAe,IAAIzN,GAAG,CAAC7B,OAAO,EAAE5H,IAAI,EAAE8G,WAAW,CAAC;;IAGpD,IAAItH,KAAK,CAACC,OAAO,CAACgE,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC,CAAC,EAAE;MAC/C,MAAM4F,MAAM,GAAGqR,MAAM,CAACxT,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC,EAAEyW,IAAI,CAACnJ,IAAI,EAAEmJ,IAAI,CAAC5I,IAAI,CAAC;MACzEqJ,eAAe,IAAIzN,GAAG,CAACpE,UAAU,CAACO,MAAM,EAAE5F,IAAI,EAAE4F,MAAM,CAAC;MACvDwR,eAAe,CAAC/R,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC;;IAG1C,IAAIkD,eAAe,CAACuC,aAAa,IAAIhC,GAAG,CAAC4B,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC,EAAE;MACxE,MAAMyF,aAAa,GAAGwR,MAAM,CAC1BxT,GAAG,CAAC4B,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC,EACnCyW,IAAI,CAACnJ,IAAI,EACTmJ,IAAI,CAAC5I,IAAI,CACV;MACDqJ,eAAe,IACbzN,GAAG,CAACpE,UAAU,CAACI,aAA6B,EAAEzF,IAAI,EAAEyF,aAAa,CAAC;MACpE2R,eAAe,CAAC/R,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC;;IAGjD,IAAIkD,eAAe,CAACsC,WAAW,IAAItC,eAAe,CAACqC,OAAO,EAAE;MAC1D8R,qBAAqB,CAACrX,IAAI,EAAE+G,MAAM,CAAC;;IAGrCf,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnBY,OAAO,EAAE+R,SAAS,CAACtX,IAAI,EAAE+G,MAAM,CAAC;MAChCvB,WAAW,EAAEH,UAAU,CAACG,WAAW;MACnCI,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBD,OAAO,EAAEN,UAAU,CAACM;KACrB,CAAC;GACH;EAED,MAAM4R,YAAY,GAAG,CAACvX,IAAuB,EAAEiJ,KAAiB,MAC9DQ,GAAG,CAACpE,UAAU,CAACO,MAAM,EAAE5F,IAAI,EAAEiJ,KAAK,CAAC,EACnCjD,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;IACnBiB,MAAM,EAAEP,UAAU,CAACO;GACpB,CAAC,CACH;EAED,MAAM4R,mBAAmB,GAAG,CAC1BxX,IAAuB,EACvByX,oBAA8B,EAC9BjP,GAAS;IAET,MAAMb,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IAEvC,IAAI2H,KAAK,EAAE;MACT,MAAM9G,YAAY,GAAG4C,GAAG,CAACuD,WAAW,EAAEhH,IAAI,EAAEyD,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,CAAC,CAAC;MAEtEmB,WAAW,CAACN,YAAY,CAAC,IACxB2H,GAAG,IAAKA,GAAwB,CAACkP,cAAe,IACjDD,oBAAoB,GAChBhO,GAAG,CACDzC,WAAW,EACXhH,IAAI,EACJyX,oBAAoB,GAAG5W,YAAY,GAAG+Q,aAAa,CAACjK,KAAK,CAACE,EAAE,CAAC,CAC9D,GACD8P,aAAa,CAAC3X,IAAI,EAAEa,YAAY,CAAC;;IAGvCsH,WAAW,CAACL,KAAK,IAAIyG,YAAY,EAAE;GACpC;EAED,MAAMqJ,mBAAmB,GAAG,UAC1B5X,IAAuB,EACvB6X,UAAmB,EACnBC,gBAA0B,EACP;IAAA,IAAnBC,YAAY,uEAAG,IAAI;IAInB,IAAIC,YAAY,GAAG,KAAK;IACxB,MAAMnN,MAAM,GAAwD;MAClE7K;KACD;IACD,MAAMiY,sBAAsB,GAAGxU,GAAG,CAAC4B,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC;IAElE,IAAIkD,eAAe,CAACqC,OAAO,EAAE;MAC3B,MAAM2S,mBAAmB,GAAG7S,UAAU,CAACE,OAAO;MAE9CF,UAAU,CAACE,OAAO,GAAGsF,MAAM,CAACtF,OAAO,GAAG+R,SAAS,EAAE;MACjDU,YAAY,GAAGE,mBAAmB,KAAKrN,MAAM,CAACtF,OAAO;;IAGvD,IAAIrC,eAAe,CAACsC,WAAW,IAAI,CAACsS,gBAAgB,EAAE;MACpD,MAAMK,oBAAoB,GAAG1U,GAAG,CAAC4B,UAAU,CAACG,WAAW,EAAExF,IAAI,CAAC;MAC9D,MAAMoY,sBAAsB,GAAGnJ,SAAS,CACtCxL,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,CAAC,EACzB6X,UAAU,CACX;MAEDO,sBAAsB,GAClB3H,KAAK,CAACpL,UAAU,CAACG,WAAW,EAAExF,IAAI,CAAC,GACnCyJ,GAAG,CAACpE,UAAU,CAACG,WAA2B,EAAExF,IAAI,EAAE,IAAI,CAAC;MAC3D6K,MAAM,CAACrF,WAAW,GAAGH,UAAU,CAACG,WAAW;MAC3CwS,YAAY,GACVA,YAAY,IACZG,oBAAoB,KAAK1U,GAAG,CAAC4B,UAAU,CAACG,WAAW,EAAExF,IAAI,CAAC;;IAG9D,IAAI8X,gBAAgB,IAAI,CAACG,sBAAsB,EAAE;MAC/CxO,GAAG,CAACpE,UAAU,CAACI,aAA6B,EAAEzF,IAAI,EAAE8X,gBAAgB,CAAC;MACrEjN,MAAM,CAACpF,aAAa,GAAGJ,UAAU,CAACI,aAAa;MAC/CuS,YAAY,GACVA,YAAY,IACX9U,eAAe,CAACuC,aAAa,IAC5BwS,sBAAsB,KAAKH,gBAAiB;;IAGlDE,YAAY,IAAID,YAAY,IAAI/R,SAAS,CAACC,KAAK,CAACtB,IAAI,CAACkG,MAAM,CAAC;IAE5D,OAAOmN,YAAY,GAAGnN,MAAM,GAAG,EAAE;GAClC;EAED,MAAMwM,qBAAqB,GAAG,CAACrX,IAAS,EAAEX,KAAU,MAClDoK,GAAG,CACDpE,UAAU,CAACG,WAA2B,EACtCxF,IAAI,EACJqY,wBAAwB,CACtBhZ,KAAK,EACLoE,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,EAAE,EAAE,CAAC,EAC7ByD,GAAG,CAAC4B,UAAU,CAACG,WAAW,EAAExF,IAAI,EAAE,EAAE,CAAC,CACtC,CACF,EACDoX,eAAe,CAAC/R,UAAU,CAACG,WAAW,EAAExF,IAAI,CAAC,CAC9C;EAED,MAAMsY,mBAAmB,GAAG,OAC1BxB,gBAAyB,EACzB9W,IAAuB,EACvB2F,OAAgB,EAChBsD,KAAkB,EAClBH,UAIC;IAED,MAAMyP,kBAAkB,GAAG9U,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC;IACvD,MAAMwY,iBAAiB,GACrBtV,eAAe,CAACyC,OAAO,IAAIN,UAAU,CAACM,OAAO,KAAKA,OAAO;IAE3D,IAAI9C,KAAK,CAAC4V,UAAU,IAAIxP,KAAK,EAAE;MAC7B+M,kBAAkB,GAChBA,kBAAkB,IAAIO,QAAQ,CAACgB,YAAY,EAAE1U,KAAK,CAAC4V,UAAU,CAAC;MAChEzC,kBAAkB,CAAChW,IAAI,EAAEiJ,KAAK,CAAC;KAChC,MAAM;MACLyN,YAAY,CAACT,KAAK,CAAC;MACnBhN,KAAK,GACDQ,GAAG,CAACpE,UAAU,CAACO,MAAM,EAAE5F,IAAI,EAAEiJ,KAAK,CAAC,GACnCwH,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC;;IAGpC,IACE,CAAC,CAACiJ,KAAK,GAAG,CAACgG,SAAS,CAACsJ,kBAAkB,EAAEtP,KAAK,CAAC,GAAGsP,kBAAkB,KAClE,CAAC1U,aAAa,CAACiF,UAAU,CAAC,IAC1B0P,iBAAiB,KACnB,CAAC1B,gBAAgB,EACjB;MACA,MAAM4B,gBAAgB,iDACjB5P,UAAU,GACT0P,iBAAiB,GAAG;QAAE7S;MAAO,CAAE,GAAG,EAAE;QACxCC,MAAM,EAAEP,UAAU,CAACO,MAAM;QACzB5F;MAAI,EACL;MAEDqF,UAAU,mCACLA,UAAU,GACVqT,gBAAgB,CACpB;MAED1S,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC+T,gBAAgB,CAAC;;IAGxCxC,cAAc,CAAClW,IAAI,CAAC,EAAE;IAEtB,IAAIkD,eAAe,CAACwC,YAAY,IAAI,CAACwQ,cAAc,CAAClW,IAAI,CAAC,EAAE;MACzDgG,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;QACnBe,YAAY,EAAE;OACf,CAAC;MACFwQ,cAAc,GAAG,EAAE;;GAEtB;EAED,MAAM7H,cAAc,GAAG,MAAOrO,IAA0B,IACtDgI,QAAQ,CAAC+O,QAAQ,GACb,MAAM/O,QAAQ,CAAC+O,QAAQ,CACrBxT,kBAAKyD,WAAW,CAAqC,EACrDgB,QAAQ,CAAC2Q,OAAO,EAChBC,kBAAkB,CAChB5Y,IAAI,IAAIoG,MAAM,CAAC0B,KAAK,EACpBF,OAAO,EACPI,QAAQ,CAACsK,YAAY,EACrBtK,QAAQ,CAACuK,yBAAyB,CACnC,CACF,GACA,EAAmC;EAE1C,MAAMsG,2BAA2B,GAAG,MAAO1Y,KAA2B;IACpE,MAAM;MAAEyF;IAAM,CAAE,GAAG,MAAMyI,cAAc,EAAE;IAEzC,IAAIlO,KAAK,EAAE;MACT,KAAK,MAAMH,IAAI,IAAIG,KAAK,EAAE;QACxB,MAAM8I,KAAK,GAAGxF,GAAG,CAACmC,MAAM,EAAE5F,IAAI,CAAC;QAC/BiJ,KAAK,GACDQ,GAAG,CAACpE,UAAU,CAACO,MAAM,EAAE5F,IAAI,EAAEiJ,KAAK,CAAC,GACnCwH,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC;;KAErC,MAAM;MACLqF,UAAU,CAACO,MAAM,GAAGA,MAAmC;;IAGzD,OAAOA,MAAM;GACd;EAED,MAAMoR,wBAAwB,GAAG,gBAC/B5M,MAAiB,EACjB0O,oBAA8B,EAG7B;IAAA,IAFDH,OAAO,uEAAG;MACRI,KAAK,EAAE;KACR;IAED,KAAK,MAAM/Y,IAAI,IAAIoK,MAAM,EAAE;MACzB,MAAMzC,KAAK,GAAGyC,MAAM,CAACpK,IAAI,CAAC;MAE1B,IAAI2H,KAAK,EAAE;QACT,MAAMqR,cAAc,GAAGrR,KAAK,CAACE,EAAE;QAC/B,MAAMgQ,UAAU,GAAG9U,IAAI,CAAC4E,KAAK,EAAE,IAAI,CAAC;QAEpC,IAAIqR,cAAc,EAAE;UAClB,MAAMC,UAAU,GAAG,MAAMC,aAAa,CACpCvR,KAAK,EACLlE,GAAG,CAACuD,WAAW,EAAEgS,cAAc,CAAChZ,IAAI,CAAC,EACrCsW,gCAAgC,EAChCtO,QAAQ,CAACuK,yBAAyB,CACnC;UAED,IAAI0G,UAAU,CAACD,cAAc,CAAChZ,IAAI,CAAC,EAAE;YACnC2Y,OAAO,CAACI,KAAK,GAAG,KAAK;YAErB,IAAID,oBAAoB,EAAE;cACxB;;;UAIJ,IAAI,CAACA,oBAAoB,EAAE;YACzBG,UAAU,CAACD,cAAc,CAAChZ,IAAI,CAAC,GAC3ByJ,GAAG,CACDpE,UAAU,CAACO,MAAM,EACjBoT,cAAc,CAAChZ,IAAI,EACnBiZ,UAAU,CAACD,cAAc,CAAChZ,IAAI,CAAC,CAChC,GACDyQ,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAEoT,cAAc,CAAChZ,IAAI,CAAC;;;QAIrD6X,UAAU,KACP,MAAMb,wBAAwB,CAC7Ba,UAAU,EACViB,oBAAoB,EACpBH,OAAO,CACR,CAAC;;;IAIR,OAAOA,OAAO,CAACI,KAAK;GACrB;EAED,MAAM5R,gBAAgB,GAAG;IACvB,KAAK,MAAMnH,IAAI,IAAIoG,MAAM,CAAC2P,OAAO,EAAE;MACjC,MAAMpO,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;MAEvC2H,KAAK,KACFA,KAAK,CAACE,EAAE,CAACyC,IAAI,GACV3C,KAAK,CAACE,EAAE,CAACyC,IAAI,CAACuH,KAAK,CAAErJ,GAAG,IAAK,CAAC2Q,IAAI,CAAC3Q,GAAG,CAAC,CAAC,GACxC,CAAC2Q,IAAI,CAACxR,KAAK,CAACE,EAAE,CAACW,GAAG,CAAC,CAAC,IACxBH,UAAU,CAACrI,IAA+B,CAAC;;IAG/CoG,MAAM,CAAC2P,OAAO,GAAG,IAAItH,GAAG,EAAE;GAC3B;EAED,MAAM6I,SAAS,GAAe,CAACtX,IAAI,EAAEb,IAAI,MACvCa,IAAI,IAAIb,IAAI,IAAIsK,GAAG,CAACzC,WAAW,EAAEhH,IAAI,EAAEb,IAAI,CAAC,EAC5C,CAAC8P,SAAS,CAACmK,SAAS,EAAE,EAAE9R,cAAc,CAAC,CACxC;EAED,MAAMJ,SAAS,GAAgC,CAC7C/G,KAAK,EACLU,YAAY,EACZyF,QAAQ;IAER,MAAMQ,WAAW,qBACXqB,WAAW,CAACL,KAAK,GACjBd,WAAW,GACX7F,WAAW,CAACN,YAAY,CAAC,GACzByG,cAAc,GACdf,QAAQ,CAACpG,KAAK,CAAC,GACf;MAAE,CAACA,KAAK,GAAGU;IAAY,CAAE,GACzBA,YAAY,CACjB;IAED,OAAOsF,mBAAmB,CAAChG,KAAK,EAAEiG,MAAM,EAAEU,WAAW,EAAER,QAAQ,CAAC;GACjE;EAED,MAAMoG,cAAc,GAAI1M,IAAuB,IAC7CyD,GAAG,CACD0E,WAAW,CAACL,KAAK,GAAGd,WAAW,GAAGM,cAAc,EAChDtH,IAAI,EACJ6C,KAAK,CAACwE,gBAAgB,GAAG5D,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,CAC5D;EAEH,MAAM2X,aAAa,GAAG,UACpB3X,IAAuB,EACvBX,KAAkC,EACN;IAAA,IAA5BkL,8EAA0B,EAAE;IAE5B,MAAM5C,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IACvC,IAAI6X,UAAU,GAAYxY,KAAK;IAE/B,IAAIsI,KAAK,EAAE;MACT,MAAMqR,cAAc,GAAGrR,KAAK,CAACE,EAAE;MAE/B,IAAImR,cAAc,EAAE;QAClBvP,GAAG,CAACzC,WAAW,EAAEhH,IAAI,EAAEqS,eAAe,CAAChT,KAAK,EAAE2Z,cAAc,CAAC,CAAC;QAE9DnB,UAAU,GACRwB,KAAK,IAAIhJ,aAAa,CAAC2I,cAAc,CAACxQ,GAAG,CAAC,IAAIjJ,iBAAiB,CAACF,KAAK,CAAC,GAClE,EAAE,GACFA,KAAK;QAEX,IAAIyS,WAAW,CAACkH,cAAc,CAACxQ,GAAG,CAAC,IAAI,CAACjC,QAAQ,CAACsR,UAAU,CAAC,EAAE;UAC5DmB,cAAc,CAACxQ,GAAG,CAACuJ,KAAK,GAAG8F,UAAsB;SAClD,MAAM,IAAI5F,gBAAgB,CAAC+G,cAAc,CAACxQ,GAAG,CAAC,EAAE;UAC/C,CAAC,GAAGwQ,cAAc,CAACxQ,GAAG,CAAC+B,OAAO,CAAC,CAAC+O,OAAO,CACpCC,SAAS,IACPA,SAAS,CAACC,QAAQ,GACjB3B,UACD,CAACpI,QAAQ,CAAC8J,SAAS,CAACla,KAAK,CAAE,CAC/B;SACF,MAAM,IAAI2Z,cAAc,CAAC1O,IAAI,EAAE;UAC9B,IAAIxK,eAAe,CAACkZ,cAAc,CAACxQ,GAAG,CAAC,EAAE;YACvCwQ,cAAc,CAAC1O,IAAI,CAAC3G,MAAM,GAAG,CAAC,GAC1BqV,cAAc,CAAC1O,IAAI,CAACgP,OAAO,CACxBG,WAAW,IACTA,WAAW,CAAC1Z,OAAO,GAAGP,KAAK,CAACC,OAAO,CAACoY,UAAU,CAAC,GAC5C,CAAC,CAAEA,UAAiB,CAAC/T,IAAI,CACtB3E,IAAY,IAAKA,IAAI,KAAKsa,WAAW,CAACpa,KAAK,CAC7C,GACDwY,UAAU,KAAK4B,WAAW,CAACpa,KAAM,CACxC,GACA2Z,cAAc,CAAC1O,IAAI,CAAC,CAAC,CAAC,CAACvK,OAAO,GAAG,CAAC,CAAC8X,UAAW;WACpD,MAAM;YACLmB,cAAc,CAAC1O,IAAI,CAACgP,OAAO,CACxBI,QAA0B,IACxBA,QAAQ,CAAC3Z,OAAO,GAAG2Z,QAAQ,CAACra,KAAK,KAAKwY,UAAW,CACrD;;SAEJ,MAAM;UACLmB,cAAc,CAACxQ,GAAG,CAACnJ,KAAK,GAAGwY,UAAU;;;;IAK3C,CAACtN,OAAO,CAACoP,WAAW,IAAIpP,OAAO,CAACqP,WAAW,KACzChC,mBAAmB,CAAC5X,IAAI,EAAE6X,UAAU,EAAEtN,OAAO,CAACqP,WAAW,CAAC;IAE5DrP,OAAO,CAACsP,cAAc,IAAIC,OAAO,CAAC9Z,IAA0B,CAAC;GAC9D;EAED,MAAM+Z,SAAS,GAAG,CAChB/Z,IAA6B,EAC7BX,KAA0E,EAC1EkL,OAAuB;IAEvB,KAAK,MAAMyP,QAAQ,IAAI3a,KAAK,EAAE;MAC5B,MAAMwY,UAAU,GAAgCxY,KAAK,CAAC2a,QAAQ,CAAC;MAC/D,MAAMrT,SAAS,GAAG,GAAG3G,IAAI,IAAIga,QAAQ,EAAwB;MAC7D,MAAMrS,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAEjB,SAAS,CAAC;MAErC,CAACP,MAAM,CAAC8B,KAAK,CAAC2O,GAAG,CAAC7W,IAAI,CAAC,IACrB,CAACoP,WAAW,CAACyI,UAAU,CAAC,IACvBlQ,KAAK,IAAI,CAACA,KAAK,CAACE,EAAG,KACtB,CAACnI,YAAY,CAACmY,UAAU,CAAC,GACrBkC,SAAS,CAACpT,SAAS,EAAEkR,UAAU,EAAEtN,OAAO,CAAC,GACzCoN,aAAa,CAAChR,SAAS,EAAEkR,UAAU,EAAEtN,OAAO,CAAC;;GAEpD;EAED,MAAM0P,QAAQ,GAAkC,UAC9Cja,IAAI,EACJX,KAAK,EACO;IAAA,IAAZkL,OAAO,uEAAG,EAAE;IAEZ,MAAM5C,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IAChC,MAAMka,YAAY,GAAG9T,MAAM,CAAC8B,KAAK,CAAC2O,GAAG,CAAC7W,IAAI,CAAC;IAE3CyJ,GAAG,CAACzC,WAAW,EAAEhH,IAAI,EAAEX,KAAK,CAAC;IAE7B,IAAI6a,YAAY,EAAE;MAChBlU,SAAS,CAACkC,KAAK,CAACvD,IAAI,CAAC;QACnB3E,IAAI;QACJ+G,MAAM,EAAEC;OACT,CAAC;MAEF,IACE,CAAC9D,eAAe,CAACqC,OAAO,IAAIrC,eAAe,CAACsC,WAAW,KACvD+E,OAAO,CAACoP,WAAW,EACnB;QACAtC,qBAAqB,CAACrX,IAAI,EAAEX,KAAK,CAAC;QAElC2G,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;UACnB3E,IAAI;UACJwF,WAAW,EAAEH,UAAU,CAACG,WAAW;UACnCD,OAAO,EAAE+R,SAAS,CAACtX,IAAI,EAAEX,KAAK;SAC/B,CAAC;;KAEL,MAAM;MACLsI,KAAK,IAAI,CAACA,KAAK,CAACE,EAAE,IAAI,CAACtI,iBAAiB,CAACF,KAAK,CAAC,GAC3C0a,SAAS,CAAC/Z,IAAI,EAAEX,KAAK,EAAEkL,OAAO,CAAC,GAC/BoN,aAAa,CAAC3X,IAAI,EAAEX,KAAK,EAAEkL,OAAO,CAAC;;IAGzCqM,cAAc,CAAC5W,IAAI,CAAC,IAAIgG,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC,EAAE,CAAC;IAChDqB,SAAS,CAACQ,KAAK,CAAC7B,IAAI,CAAC;MACnB3E;KACD,CAAC;GACH;EAED,MAAMma,YAAY,GAAkB,MAAOxa,KAAK;IAC9C,MAAME,MAAM,GAAGF,KAAK,CAACE,MAAM;IAC3B,IAAIG,IAAI,GAAGH,MAAM,CAACG,IAAI;IACtB,MAAM2H,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IAEvC,IAAI2H,KAAK,EAAE;MACT,IAAIsB,KAAK;MACT,IAAItD,OAAO;MACX,MAAMkS,UAAU,GAAGhY,MAAM,CAACX,IAAI,GAAG0S,aAAa,CAACjK,KAAK,CAACE,EAAE,CAAC,GAAGhI,MAAM,CAACR,KAAK;MACvE,MAAM8T,WAAW,GAAGxT,KAAK,CAACT,IAAI,KAAKkC,MAAM,CAACC,IAAI;MAC9C,MAAM+Y,oBAAoB,GACvB,CAACC,aAAa,CAAC1S,KAAK,CAACE,EAAE,CAAC,IACvB,CAACG,QAAQ,CAAC+O,QAAQ,IAClB,CAACtT,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC,IAC7B,CAAC2H,KAAK,CAACE,EAAE,CAACyS,IAAI,IAChBC,cAAc,CACZpH,WAAW,EACX1P,GAAG,CAAC4B,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC,EACnCqF,UAAU,CAAC+N,WAAW,EACtBiD,yBAAyB,EACzBF,0BAA0B,CAC3B;MACH,MAAMqE,SAAS,GAAG5D,cAAc,CAAC5W,IAAI,EAAEmT,WAAW,CAAC;MAEnD,IAAIA,WAAW,EAAE;QACfxL,KAAK,CAACE,EAAE,CAACrG,MAAM,IAAImG,KAAK,CAACE,EAAE,CAACrG,MAAM,CAAC7B,KAAK,CAAC;OAC1C,MAAM,IAAIgI,KAAK,CAACE,EAAE,CAACpG,QAAQ,EAAE;QAC5BkG,KAAK,CAACE,EAAE,CAACpG,QAAQ,CAAC9B,KAAK,CAAC;;MAG1B8J,GAAG,CAACzC,WAAW,EAAEhH,IAAI,EAAE6X,UAAU,CAAC;MAElC,MAAM/O,UAAU,GAAG8O,mBAAmB,CACpC5X,IAAI,EACJ6X,UAAU,EACV1E,WAAW,EACX,KAAK,CACN;MAED,MAAM4E,YAAY,GAAG,CAAClU,aAAa,CAACiF,UAAU,CAAC,IAAI0R,SAAS;MAE5D,CAACrH,WAAW,IACVnN,SAAS,CAACQ,KAAK,CAAC7B,IAAI,CAAC;QACnB3E,IAAI;QACJd,IAAI,EAAES,KAAK,CAACT;OACb,CAAC;MAEJ,IAAIkb,oBAAoB,EAAE;QACxB,OACErC,YAAY,IACZ/R,SAAS,CAACC,KAAK,CAACtB,IAAI;UAAG3E;QAAI,GAAMwa,SAAS,GAAG,EAAE,GAAG1R,UAAU,EAAI;;MAIpE,CAACqK,WAAW,IAAIqH,SAAS,IAAIxU,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC,EAAE,CAAC;MAErDuR,cAAc,CAAClW,IAAI,CAAC,GAAGkW,cAAc,CAAClW,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAEpDkD,eAAe,CAACwC,YAAY,IAC1BM,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;QACnBe,YAAY,EAAE;OACf,CAAC;MAEJ,IAAIsC,QAAQ,CAAC+O,QAAQ,EAAE;QACrB,MAAM;UAAEnR;QAAM,CAAE,GAAG,MAAMyI,cAAc,CAAC,CAACrO,IAAI,CAAC,CAAC;QAC/C,MAAMya,yBAAyB,GAAGjI,iBAAiB,CACjDnN,UAAU,CAACO,MAAM,EACjBgC,OAAO,EACP5H,IAAI,CACL;QACD,MAAM0a,iBAAiB,GAAGlI,iBAAiB,CACzC5M,MAAM,EACNgC,OAAO,EACP6S,yBAAyB,CAACza,IAAI,IAAIA,IAAI,CACvC;QAEDiJ,KAAK,GAAGyR,iBAAiB,CAACzR,KAAK;QAC/BjJ,IAAI,GAAG0a,iBAAiB,CAAC1a,IAAI;QAE7B2F,OAAO,GAAG9B,aAAa,CAAC+B,MAAM,CAAC;OAChC,MAAM;QACLqD,KAAK,GAAG,CACN,MAAMiQ,aAAa,CACjBvR,KAAK,EACLlE,GAAG,CAACuD,WAAW,EAAEhH,IAAI,CAAU,EAC/BsW,gCAAgC,EAChCtO,QAAQ,CAACuK,yBAAyB,CACnC,EACDvS,IAAI,CAAC;QAEP2F,OAAO,GAAG,MAAM4I,YAAY,CAAC,IAAI,CAAC;;MAGpC5G,KAAK,CAACE,EAAE,CAACyS,IAAI,IAAIR,OAAO,CAACnS,KAAK,CAACE,EAAE,CAACyS,IAAiC,CAAC;MAEpEhC,mBAAmB,CAAC,KAAK,EAAEtY,IAAI,EAAE2F,OAAO,EAAEsD,KAAK,EAAEH,UAAU,CAAC;;GAE/D;EAED,MAAMgR,OAAO,GAAiC,gBAAO9Z,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACrE,IAAI5E,OAAO;IACX,IAAI4P,gBAAgB;IACpB,MAAMoF,UAAU,GAAG3W,qBAAqB,CAAChE,IAAI,CAAwB;IAErEgG,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnBe,YAAY,EAAE;KACf,CAAC;IAEF,IAAIsC,QAAQ,CAAC+O,QAAQ,EAAE;MACrB,MAAMnR,MAAM,GAAG,MAAMiT,2BAA2B,CAC9C1X,WAAW,CAACnB,IAAI,CAAC,GAAGA,IAAI,GAAG2a,UAAU,CACtC;MAEDhV,OAAO,GAAG9B,aAAa,CAAC+B,MAAM,CAAC;MAC/B2P,gBAAgB,GAAGvV,IAAI,GACnB,CAAC2a,UAAU,CAACva,IAAI,CAAEJ,IAAI,IAAKyD,GAAG,CAACmC,MAAM,EAAE5F,IAAI,CAAC,CAAC,GAC7C2F,OAAO;KACZ,MAAM,IAAI3F,IAAI,EAAE;MACfuV,gBAAgB,GAAG,CACjB,MAAMqF,OAAO,CAAChZ,GAAG,CACf+Y,UAAU,CAACjU,GAAG,CAAC,MAAOC,SAAS;QAC7B,MAAMgB,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAEjB,SAAS,CAAC;QACrC,OAAO,MAAMqQ,wBAAwB,CACnCrP,KAAK,IAAIA,KAAK,CAACE,EAAE,GAAG;UAAE,CAAClB,SAAS,GAAGgB;QAAK,CAAE,GAAGA,KAAK,CACnD;OACF,CAAC,CACH,EACDkK,KAAK,CAACrR,OAAO,CAAC;MAChB,EAAE,CAAC+U,gBAAgB,IAAI,CAAClQ,UAAU,CAACM,OAAO,CAAC,IAAI4I,YAAY,EAAE;KAC9D,MAAM;MACLgH,gBAAgB,GAAG5P,OAAO,GAAG,MAAMqR,wBAAwB,CAACpP,OAAO,CAAC;;IAGtE5B,SAAS,CAACC,KAAK,CAACtB,IAAI,+CACd,CAAC4B,QAAQ,CAACvG,IAAI,CAAC,IAClBkD,eAAe,CAACyC,OAAO,IAAIA,OAAO,KAAKN,UAAU,CAACM,OAAQ,GACvD,EAAE,GACF;MAAE3F;IAAI,CAAE,GACRgI,QAAQ,CAAC+O,QAAQ,GAAG;MAAEpR;IAAO,CAAE,GAAG,EAAE;MACxCC,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBF,YAAY,EAAE;IAAK,GACnB;IAEF6E,OAAO,CAACC,WAAW,IACjB,CAAC+K,gBAAgB,IACjBpL,YAAY,CACVvC,OAAO,EACN1G,GAAG,IAAKuC,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE1E,GAAG,CAAC,EACpClB,IAAI,GAAG2a,UAAU,GAAGvU,MAAM,CAAC0B,KAAK,CACjC;IAEH,OAAOyN,gBAAgB;GACxB;EAED,MAAM6D,SAAS,GACbuB,UAE0C;IAE1C,MAAM5T,MAAM,mCACPO,cAAc,GACba,WAAW,CAACL,KAAK,GAAGd,WAAW,GAAG,EAAE,CACzC;IAED,OAAO7F,WAAW,CAACwZ,UAAU,CAAC,GAC1B5T,MAAM,GACNR,QAAQ,CAACoU,UAAU,CAAC,GACpBlX,GAAG,CAACsD,MAAM,EAAE4T,UAA+B,CAAC,GAC5CA,UAAU,CAACjU,GAAG,CAAE1G,IAAI,IAAKyD,GAAG,CAACsD,MAAM,EAAE/G,IAAyB,CAAC,CAAC;GACrE;EAED,MAAM6a,WAAW,GAAsC7a,IAAI;IACzDA,IAAI,GACAgE,qBAAqB,CAAChE,IAAI,CAAC,CAACsZ,OAAO,CAAEwB,SAAS,IAC5CrK,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAEkV,SAAS,CAAC,CACpC,GACAzV,UAAU,CAACO,MAAM,GAAG,EAAgC;IAEzDI,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnBiB,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBD,OAAO,EAAE;KACV,CAAC;GACH;EAED,MAAMoV,QAAQ,GAAkC,CAAC/a,IAAI,EAAEiJ,KAAK,EAAEsB,OAAO;IACnE,MAAM/B,GAAG,GAAG,CAAE/E,GAAG,CAACmE,OAAO,EAAE5H,IAAI,EAAE;MAAE6H,EAAE,EAAE;IAAE,CAAE,CAAW,CAACA,EAAE,IAAI,EAAE,EAAEW,GAAG;IAEpEiB,GAAG,CAACpE,UAAU,CAACO,MAAM,EAAE5F,IAAI,kCACtBiJ,KAAK;MACRT;IAAG,GACH;IAEFxC,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnB3E,IAAI;MACJ4F,MAAM,EAAEP,UAAU,CAACO,MAAM;MACzBD,OAAO,EAAE;KACV,CAAC;IAEF4E,OAAO,IAAIA,OAAO,CAACC,WAAW,IAAIhC,GAAG,IAAIA,GAAG,CAACE,KAAK,IAAIF,GAAG,CAACE,KAAK,EAAE;GAClE;EAED,MAAMlC,KAAK,GAA+B,CACxCxG,IAG+B,EAC/Ba,YAAsB,KAEtB6N,UAAU,CAAC1O,IAAI,CAAC,GACZgG,SAAS,CAACQ,KAAK,CAAC9B,SAAS,CAAC;IACxBC,IAAI,EAAGqW,IAAS,IACdhb,IAAI,CACFkH,SAAS,CACPxG,SAAS,EACTG,YAA4D,CAC7D,EACDma,IAAI;GAET,CAAC,GACF9T,SAAS,CACPlH,IAA+C,EAC/Ca,YAA4D,EAC5D,IAAI,CACL;EAEP,MAAMwH,UAAU,GAAoC,UAACrI,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACrE,KAAK,MAAM5D,SAAS,IAAI3G,IAAI,GAAGgE,qBAAqB,CAAChE,IAAI,CAAC,GAAGoG,MAAM,CAAC0B,KAAK,EAAE;MACzE1B,MAAM,CAAC0B,KAAK,CAACmT,MAAM,CAACtU,SAAS,CAAC;MAC9BP,MAAM,CAAC8B,KAAK,CAAC+S,MAAM,CAACtU,SAAS,CAAC;MAE9B,IAAIlD,GAAG,CAACmE,OAAO,EAAEjB,SAAS,CAAC,EAAE;QAC3B,IAAI,CAAC4D,OAAO,CAAC2Q,SAAS,EAAE;UACtBzK,KAAK,CAAC7I,OAAO,EAAEjB,SAAS,CAAC;UACzB8J,KAAK,CAACzJ,WAAW,EAAEL,SAAS,CAAC;;QAG/B,CAAC4D,OAAO,CAAC4Q,SAAS,IAAI1K,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAEe,SAAS,CAAC;QACzD,CAAC4D,OAAO,CAAC6Q,SAAS,IAAI3K,KAAK,CAACpL,UAAU,CAACG,WAAW,EAAEmB,SAAS,CAAC;QAC9D,CAAC4D,OAAO,CAAC8Q,WAAW,IAAI5K,KAAK,CAACpL,UAAU,CAACI,aAAa,EAAEkB,SAAS,CAAC;QAClE,CAACqB,QAAQ,CAACX,gBAAgB,IACxB,CAACkD,OAAO,CAACjC,gBAAgB,IACzBmI,KAAK,CAACnJ,cAAc,EAAEX,SAAS,CAAC;;;IAItCX,SAAS,CAACQ,KAAK,CAAC7B,IAAI,CAAC,EAAE,CAAC;IAExBqB,SAAS,CAACC,KAAK,CAACtB,IAAI,iCACfU,UAAU,GACT,CAACkF,OAAO,CAAC6Q,SAAS,GAAG,EAAE,GAAG;MAAE7V,OAAO,EAAE+R,SAAS;IAAE,CAAE,EACtD;IAEF,CAAC/M,OAAO,CAAC+Q,WAAW,IAAI/M,YAAY,EAAE;GACvC;EAED,MAAM/G,QAAQ,GAAkC,UAACxH,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACjE,MAAM5C,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;IAEhCyJ,GAAG,CAAC7B,OAAO,EAAE5H,IAAI,EAAE;MACjB6H,EAAE,gDACIF,KAAK,IAAIA,KAAK,CAACE,EAAE,GAAGF,KAAK,CAACE,EAAE,GAAG;QAAEW,GAAG,EAAE;UAAExI;QAAI;MAAE,CAAE;QACpDA,IAAI;QACJ8H,KAAK,EAAE;MAAI,IACRyC,OAAO;KAEb,CAAC;IACFnE,MAAM,CAAC0B,KAAK,CAACrB,GAAG,CAACzG,IAAI,CAAC;IAEtB,CAACmB,WAAW,CAACoJ,OAAO,CAAClL,KAAK,CAAC,IACzB,CAACkL,OAAO,CAAC/F,QAAQ,IACjBiF,GAAG,CAACzC,WAAW,EAAEhH,IAAI,EAAEyD,GAAG,CAACuD,WAAW,EAAEhH,IAAI,EAAEuK,OAAO,CAAClL,KAAK,CAAC,CAAC;IAE/DsI,KAAK,GACDsJ,SAAS,CAAC1G,OAAO,CAAC/F,QAAQ,CAAC,IAC3BiF,GAAG,CACDzC,WAAW,EACXhH,IAAI,EACJuK,OAAO,CAAC/F,QAAQ,GACZ9D,SAAS,GACT+C,GAAG,CAACuD,WAAW,EAAEhH,IAAI,EAAE4R,aAAa,CAACjK,KAAK,CAACE,EAAE,CAAC,CAAC,CACpD,GACD2P,mBAAmB,CAACxX,IAAI,EAAE,IAAI,CAAC;IAEnC,OAAO0V,iBAAiB,GACnB;MAAE1V,IAAI,EAAEA;IAAyB,CAA4B;MAE5DA;IAAI,GACAiR,SAAS,CAAC1G,OAAO,CAAC/F,QAAQ,CAAC,GAC3B;MAAEA,QAAQ,EAAE+F,OAAO,CAAC/F;IAAQ,CAAE,GAC9B,EAAE;MACN/C,QAAQ,EAAE0Y,YAAY;MACtB3Y,MAAM,EAAE2Y,YAAY;MACpB3R,GAAG,EAAGA,GAA4B;QAChC,IAAIA,GAAG,EAAE;UACPhB,QAAQ,CAACxH,IAAI,EAAEuK,OAAO,CAAC;UACvB,IAAI5C,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;UACrC,MAAMub,QAAQ,GAAGpa,WAAW,CAACqH,GAAG,CAACnJ,KAAK,CAAC,GACnCmJ,GAAG,CAACgT,gBAAgB,GACjBhT,GAAG,CAACgT,gBAAgB,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAS,IACzDhT,GAAG,GACHA,GAAG,GACLA,GAAG;UAEP,MAAMwL,iBAAiB,GAAGyH,yBAAyB,CAACF,QAAQ,CAAC;UAE7D,IACEA,QAAQ,KAAK5T,KAAK,CAACE,EAAE,CAACW,GAAG,IACxBwL,iBAAiB,IAChBjT,OAAO,CAAC4G,KAAK,CAACE,EAAE,CAACyC,IAAI,IAAI,EAAE,CAAC,CAACxG,IAAI,CAC9BsN,MAAM,IAAKA,MAAM,KAAKmK,QAAQ,CAC/B,EACJ;YACA;;UAGF5T,KAAK,GAAG;YACNE,EAAE,EAAEmM,iBAAiB,mCAEZrM,KAAK,CAACE,EAAE;cACXyC,IAAI,EAAE,CACJ,GAAGvJ,OAAO,CAAC4G,KAAK,CAACE,EAAE,CAACyC,IAAI,IAAI,EAAE,CAAC,CAAC/J,MAAM,CAAC4Y,IAAI,CAAC,EAC5CoC,QAAQ,CACT;cACD/S,GAAG,EAAE;gBAAEtJ,IAAI,EAAEqc,QAAQ,CAACrc,IAAI;gBAAEc;cAAI;YAAE,qCAG/B2H,KAAK,CAACE,EAAE;cACXW,GAAG,EAAE+S;YAAQ;WAEpB;UAED9R,GAAG,CAAC7B,OAAO,EAAE5H,IAAI,EAAE2H,KAAK,CAAC;UAEzB,CAAC,CAAC4C,OAAO,IAAI,CAACA,OAAO,CAAC/F,QAAQ,KAC5BgT,mBAAmB,CAACxX,IAAI,EAAE,KAAK,EAAEub,QAAQ,CAAC;SAC7C,MAAM;UACL,MAAM5T,KAAK,GAAUlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,EAAE,EAAE,CAAC;UAC3C,MAAMqH,gBAAgB,GACpBW,QAAQ,CAACX,gBAAgB,IAAIkD,OAAO,CAAClD,gBAAgB;UAEvD,IAAIM,KAAK,CAACE,EAAE,EAAE;YACZF,KAAK,CAACE,EAAE,CAACC,KAAK,GAAG,KAAK;;UAGxBT,gBAAgB,IACd,EACEY,kBAAkB,CAAC7B,MAAM,CAAC8B,KAAK,EAAElI,IAAI,CAAC,IAAImI,WAAW,CAACC,MAAM,CAC7D,IACDhC,MAAM,CAAC2P,OAAO,CAACtP,GAAG,CAACzG,IAAI,CAAC;;;IAE7B,EACF;GACN;EAED,MAAM0b,YAAY,GAChB,CAACC,OAAO,EAAEC,SAAS,KAAK,MAAOC,CAAC;IAC9B,IAAIA,CAAC,EAAE;MACLA,CAAC,CAACC,cAAc,IAAID,CAAC,CAACC,cAAc,EAAE;MACtCD,CAAC,CAACE,OAAO,IAAIF,CAAC,CAACE,OAAO,EAAE;;IAE1B,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIlV,WAAW,GAAQkB,QAAQ,CAACX,gBAAgB,GAC5CmH,WAAW,CAACxH,WAAW,CAAC,qBACnBA,WAAW,CAAE;IAEtBhB,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnBkR,YAAY,EAAE;KACf,CAAC;IAEF,IAAI;MACF,IAAI7N,QAAQ,CAAC+O,QAAQ,EAAE;QACrB,MAAM;UAAEnR,MAAM;UAAEmB;QAAM,CAAE,GAAG,MAAMsH,cAAc,EAAE;QACjDhJ,UAAU,CAACO,MAAM,GAAGA,MAAmC;QACvDkB,WAAW,GAAGC,MAAM;OACrB,MAAM;QACL,MAAMiQ,wBAAwB,CAACpP,OAAO,CAAC;;MAGzC,IACE/D,aAAa,CAACwB,UAAU,CAACO,MAAM,CAAC,IAChCrC,MAAM,CAACG,IAAI,CAAC2B,UAAU,CAACO,MAAM,CAAC,CAACiM,KAAK,CAAE7R,IAAI,IAAKyD,GAAG,CAACqD,WAAW,EAAE9G,IAAI,CAAC,CAAC,EACtE;QACAgG,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;UACnBiB,MAAM,EAAE,EAA+B;UACvCiQ,YAAY,EAAE;SACf,CAAC;QACF,MAAM8F,OAAO,CAAC7U,WAAW,EAAE+U,CAAC,CAAC;OAC9B,MAAM;QACLD,SAAS,KAAK,MAAMA,SAAS,CAACvW,UAAU,CAACO,MAAM,EAAEiW,CAAC,CAAC,CAAC;QACpD7T,QAAQ,CAACyN,gBAAgB,IACvBtL,YAAY,CACVvC,OAAO,EACN1G,GAAG,IAAKuC,GAAG,CAAC4B,UAAU,CAACO,MAAM,EAAE1E,GAAG,CAAC,EACpCkF,MAAM,CAAC0B,KAAK,CACb;;KAEN,CAAC,OAAOmU,GAAG,EAAE;MACZD,iBAAiB,GAAG,KAAK;MACzB,MAAMC,GAAG;KACV,SAAS;MACR5W,UAAU,CAAC+N,WAAW,GAAG,IAAI;MAC7BpN,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;QACnByO,WAAW,EAAE,IAAI;QACjByC,YAAY,EAAE,KAAK;QACnBC,kBAAkB,EAChBjS,aAAa,CAACwB,UAAU,CAACO,MAAM,CAAC,IAAIoW,iBAAiB;QACvDpG,WAAW,EAAEvQ,UAAU,CAACuQ,WAAW,GAAG,CAAC;QACvChQ,MAAM,EAAEP,UAAU,CAACO;OACpB,CAAC;;GAEL;EAEH,MAAMsW,UAAU,GAAoC,UAAClc,IAAI,EAAc;IAAA,IAAZuK,OAAO,uEAAG,EAAE;IACrE,IAAIpJ,WAAW,CAACoJ,OAAO,CAAC1J,YAAY,CAAC,EAAE;MACrCoZ,QAAQ,CAACja,IAAI,EAAEyD,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,CAAC,CAAC;KAC1C,MAAM;MACLia,QAAQ,CAACja,IAAI,EAAEuK,OAAO,CAAC1J,YAAY,CAAC;MACpC4I,GAAG,CAACnC,cAAc,EAAEtH,IAAI,EAAEuK,OAAO,CAAC1J,YAAY,CAAC;;IAGjD,IAAI,CAAC0J,OAAO,CAAC8Q,WAAW,EAAE;MACxB5K,KAAK,CAACpL,UAAU,CAACI,aAAa,EAAEzF,IAAI,CAAC;;IAGvC,IAAI,CAACuK,OAAO,CAAC6Q,SAAS,EAAE;MACtB3K,KAAK,CAACpL,UAAU,CAACG,WAAW,EAAExF,IAAI,CAAC;MACnCqF,UAAU,CAACE,OAAO,GAAGgF,OAAO,CAAC1J,YAAY,GACrCyW,SAAS,CAACtX,IAAI,EAAEyD,GAAG,CAAC6D,cAAc,EAAEtH,IAAI,CAAC,CAAC,GAC1CsX,SAAS,EAAE;;IAGjB,IAAI,CAAC/M,OAAO,CAAC4Q,SAAS,EAAE;MACtB1K,KAAK,CAACpL,UAAU,CAACO,MAAM,EAAE5F,IAAI,CAAC;MAC9BkD,eAAe,CAACyC,OAAO,IAAI4I,YAAY,EAAE;;IAG3CvI,SAAS,CAACC,KAAK,CAACtB,IAAI,mBAAMU,UAAU,EAAG;GACxC;EAED,MAAM8W,KAAK,GAA+B,UACxC9V,UAAU,EACW;IAAA,IAArB+V,gBAAgB,uEAAG,EAAE;IAErB,MAAMC,aAAa,GAAGhW,UAAU,IAAIiB,cAAc;IAClD,MAAMgV,kBAAkB,GAAG9N,WAAW,CAAC6N,aAAa,CAAC;IACrD,MAAMtV,MAAM,GAAG,CAAClD,aAAa,CAACwC,UAAU,CAAC,GACrCiW,kBAAkB,GAClBhV,cAAc;IAElB,IAAI,CAAC8U,gBAAgB,CAACG,iBAAiB,EAAE;MACvCjV,cAAc,GAAG+U,aAAa;;IAGhC,IAAI,CAACD,gBAAgB,CAACI,UAAU,EAAE;MAChC,IAAInD,KAAK,EAAE;QACT,KAAK,MAAMrZ,IAAI,IAAIoG,MAAM,CAAC0B,KAAK,EAAE;UAC/B,MAAMH,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC;UAChC,IAAI2H,KAAK,IAAIA,KAAK,CAACE,EAAE,EAAE;YACrB,MAAMmR,cAAc,GAAGxZ,KAAK,CAACC,OAAO,CAACkI,KAAK,CAACE,EAAE,CAACyC,IAAI,CAAC,GAC/C3C,KAAK,CAACE,EAAE,CAACyC,IAAI,CAAC,CAAC,CAAC,GAChB3C,KAAK,CAACE,EAAE,CAACW,GAAG;YAEhB,IAAI;cACF6H,aAAa,CAAC2I,cAAc,CAAC,IAC3BA,cAAc,CAACyD,OAAO,CAAC,MAAM,CAAE,CAACN,KAAK,EAAE;cACzC;aACD,CAAC,WAAM;;;;MAKdnV,WAAW,GAAGnE,KAAK,CAACwE,gBAAgB,GAChC+U,gBAAgB,CAACG,iBAAiB,GAChC/N,WAAW,CAAClH,cAAc,CAAC,GAC3B,EAAE,GACJgV,kBAAkB;MACtB1U,OAAO,GAAG,EAAE;MAEZ5B,SAAS,CAACQ,KAAK,CAAC7B,IAAI,CAAC;QACnBoC;OACD,CAAC;MAEFf,SAAS,CAACkC,KAAK,CAACvD,IAAI,CAAC;QACnBoC;OACD,CAAC;;IAGJX,MAAM,GAAG;MACP0B,KAAK,EAAE,IAAI2G,GAAG,EAAE;MAChBsH,OAAO,EAAE,IAAItH,GAAG,EAAE;MAClBvG,KAAK,EAAE,IAAIuG,GAAG,EAAE;MAChBjI,KAAK,EAAE,IAAIiI,GAAG,EAAE;MAChB7H,QAAQ,EAAE,KAAK;MACf8B,KAAK,EAAE;KACR;IAED1C,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC;MACnBiR,WAAW,EAAEwG,gBAAgB,CAACM,eAAe,GACzCrX,UAAU,CAACuQ,WAAW,GACtB,CAAC;MACLrQ,OAAO,EAAE6W,gBAAgB,CAAChB,SAAS,GAC/B/V,UAAU,CAACE,OAAO,GAClB6W,gBAAgB,CAACG,iBAAiB,GAClC,CAACtN,SAAS,CAAC5I,UAAU,EAAEiB,cAAc,CAAC,GACtC,KAAK;MACT8L,WAAW,EAAEgJ,gBAAgB,CAACO,eAAe,GACzCtX,UAAU,CAAC+N,WAAW,GACtB,KAAK;MACT5N,WAAW,EAAE4W,gBAAgB,CAAChB,SAAS,GACnC/V,UAAU,CAACG,WAAW,GACpB4W,gBAAgB,CAACG,iBAAiB,IAAIlW,UAAU,GAC9C9C,MAAM,CAACqZ,OAAO,CAACvW,UAAU,CAAC,CAACpF,MAAM,CAC/B,CAAC0Q,QAAQ;QAAA,IAAE,CAACzQ,GAAG,EAAE7B,KAAK,CAAC;QAAA,uCAClBsS,QAAQ;UACX,CAACzQ,GAAG,GAAG7B,KAAK,KAAKoE,GAAG,CAAC6D,cAAc,EAAEpG,GAAG;QAAC;MAAA,CACzC,EACF,EAAE,CACH,GACD,EAA6C;MACrDuE,aAAa,EAAE2W,gBAAgB,CAACf,WAAW,GACvChW,UAAU,CAACI,aAAa,GACvB,EAA4C;MACjDG,MAAM,EAAEwW,gBAAgB,CAACS,UAAU,GAC/BxX,UAAU,CAACO,MAAM,GAChB,EAAgC;MACrCiQ,YAAY,EAAE,KAAK;MACnBC,kBAAkB,EAAE;KACrB,CAAC;IAEF3N,WAAW,CAACL,KAAK,GACf,CAAC5E,eAAe,CAACyC,OAAO,IAAI,CAAC,CAACyW,gBAAgB,CAACd,WAAW;IAC5DnT,WAAW,CAAC3B,KAAK,GAAG,CAAC,CAAC3D,KAAK,CAACwE,gBAAgB;GAC7C;EAED,MAAMyV,QAAQ,GAAmC9c,IAAI;IACnD,MAAM2H,KAAK,GAAGlE,GAAG,CAACmE,OAAO,EAAE5H,IAAI,CAAC,CAAC6H,EAAE;IACnC,CAACF,KAAK,CAACa,GAAG,CAACE,KAAK,GAAGf,KAAK,CAACa,GAAG,GAAGb,KAAK,CAAC2C,IAAI,CAAC,CAAC,CAAC,EAAE5B,KAAK,EAAE;GACtD;EAED,OAAO;IACLxD,OAAO,EAAE;MACPsC,QAAQ;MACRa,UAAU;MACVgG,cAAc;MACdnH,SAAS;MACToQ,SAAS;MACT/I,YAAY;MACZpH,gBAAgB;MAChBkG,iBAAiB;MACjBX,cAAc;MACd1G,SAAS;MACT9C,eAAe;MACf,IAAI0E,OAAO;QACT,OAAOA,OAAO;OACf;MACD,IAAIA,OAAO,CAACvI,KAAK;QACfuI,OAAO,GAAGvI,KAAK;OAChB;MACD,IAAI2H,WAAW;QACb,OAAOA,WAAW;OACnB;MACD,IAAIA,WAAW,CAAC3H,KAAK;QACnB2H,WAAW,GAAG3H,KAAK;OACpB;MACD,IAAI8I,WAAW;QACb,OAAOA,WAAW;OACnB;MACD,IAAIA,WAAW,CAAC9I,KAAK;QACnB8I,WAAW,GAAG9I,KAAK;OACpB;MACD,IAAIiI,cAAc;QAChB,OAAOA,cAAc;OACtB;MACD,IAAIA,cAAc,CAACjI,KAAK;QACtBiI,cAAc,GAAGjI,KAAK;OACvB;MACD,IAAI+G,MAAM;QACR,OAAOA,MAAM;OACd;MACD,IAAIA,MAAM,CAAC/G,KAAK;QACd+G,MAAM,GAAG/G,KAAK;OACf;MACD,IAAIgG,UAAU;QACZ,OAAOA,UAAU;OAClB;MACD,IAAIA,UAAU,CAAChG,KAAK;QAClBgG,UAAU,GAAGhG,KAAK;OACnB;MACD,IAAI2I,QAAQ;QACV,OAAOA,QAAQ;OAChB;MACD,IAAIA,QAAQ,CAAC3I,KAAK;QAChB2I,QAAQ,mCACHA,QAAQ,GACR3I,KAAK,CACT;;KAEJ;IACDya,OAAO;IACPtS,QAAQ;IACRkU,YAAY;IACZlV,KAAK;IACLyT,QAAQ;IACRb,SAAS;IACT+C,KAAK;IACLD,UAAU;IACVrB,WAAW;IACXxS,UAAU;IACV0S,QAAQ;IACR+B;GACD;AACH;SCtsCgBC,OAAO,GAI2B;EAAA,IAAhDla,4EAA8C,EAAE;EAEhD,MAAMma,YAAY,GAAGxa,KAAK,CAACsC,MAAM,EAE9B;EACH,MAAM,CAAC7B,SAAS,EAAEkC,eAAe,CAAC,GAAG3C,KAAK,CAAC4C,QAAQ,CAA0B;IAC3EG,OAAO,EAAE,KAAK;IACdG,YAAY,EAAE,KAAK;IACnBF,WAAW,EAAE,EAA2C;IACxD4N,WAAW,EAAE,KAAK;IAClBwC,WAAW,EAAE,CAAC;IACdnQ,aAAa,EAAE,EAA2C;IAC1DoQ,YAAY,EAAE,KAAK;IACnBC,kBAAkB,EAAE,KAAK;IACzBnQ,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;GACT,CAAC;EAEF,IAAIoX,YAAY,CAAC3c,OAAO,EAAE;IACxB2c,YAAY,CAAC3c,OAAO,CAAC6E,OAAO,CAAC8C,QAAQ,GAAGnF,KAAK;GAC9C,MAAM;IACLma,YAAY,CAAC3c,OAAO,mCACfsV,iBAAiB,CAAC9S,KAAK,CAAC;MAC3BI;IAAS,EACV;;EAGH,MAAMiC,OAAO,GAAG8X,YAAY,CAAC3c,OAAO,CAAC6E,OAAO;EAE5CL,YAAY,CAAC;IACXJ,OAAO,EAAES,OAAO,CAACc,SAAS,CAACC,KAAK;IAChCrB,QAAQ,EAAG3B,SAAS;MAClB,IAAI8C,qBAAqB,CAAC9C,SAAS,EAAEiC,OAAO,CAAChC,eAAe,EAAE,IAAI,CAAC,EAAE;QACnEgC,OAAO,CAACG,UAAU,mCACbH,OAAO,CAACG,UAAU,GAClBpC,SAAS,CACb;QAEDkC,eAAe,mBAAMD,OAAO,CAACG,UAAU,EAAG;;;GAG/C,CAAC;EAEF7C,KAAK,CAACuC,SAAS,CAAC;IACd,IAAI,CAACG,OAAO,CAACiD,WAAW,CAACL,KAAK,EAAE;MAC9B5C,OAAO,CAAChC,eAAe,CAACyC,OAAO,IAAIT,OAAO,CAACqJ,YAAY,EAAE;MACzDrJ,OAAO,CAACiD,WAAW,CAACL,KAAK,GAAG,IAAI;;IAElC,IAAI5C,OAAO,CAACiD,WAAW,CAAC3B,KAAK,EAAE;MAC7BtB,OAAO,CAACiD,WAAW,CAAC3B,KAAK,GAAG,KAAK;MACjCtB,OAAO,CAACc,SAAS,CAACC,KAAK,CAACtB,IAAI,CAAC,EAAE,CAAC;;IAElCO,OAAO,CAACiC,gBAAgB,EAAE;GAC3B,CAAC;EAEF6V,YAAY,CAAC3c,OAAO,CAAC4C,SAAS,GAAGiD,iBAAiB,CAChDjD,SAAS,EACTiC,OAAO,CAAChC,eAAe,CACxB;EAED,OAAO8Z,YAAY,CAAC3c,OAAO;AAC7B","names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","source","copy","HookFormContext","React","createContext","useFormContext","useContext","FormProvider","props","Provider","omit","children","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_subscription","unsubscribe","updateSubscriptionProps","_props","disabled","subject","subscribe","next","callback","useSubscribe","useRef","useEffect","useFormState","methods","control","updateFormState","useState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","generateWatchOutput","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","useWatch","fieldValues","values","_formValues","updateValue","_getWatch","_removeUnmounted","useController","shouldUnregister","_defaultValues","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","array","_stateFlags","action","unregister","keepDefaultValue","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","options","shouldFocus","focusName","focusIndex","_fieldIds","keyName","output","d","performance","now","c","r","Math","random","toString","generateId","append","insert","slice","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","sort","a","b","indexA","indexB","useFieldArray","setFields","mapIds","_getFieldArray","_actioned","fieldArrayName","updateValues","useCallback","updatedFieldArrayValuesWithKey","updatedFieldArrayValues","omitKeys","appendValue","appendAt","mapCurrentIds","_updateFieldArray","argA","fillEmptyArray","getFocusFieldName","prependAt","remove","removeArrayAt","insertAt","argB","swap","swapArrayAt","move","moveArrayAt","update","updateAt","watchField","_executeSchema","then","_updateValid","cloneObject","Set","isFunction","createSubject","_observers","observer","push","o","observers","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","schemaErrorLookup","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isValidElement","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","submitCount","isSubmitting","isSubmitSuccessful","unMount","delayErrorCallback","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","has","shouldSkipRender","resolver","executeBuildInValidation","method","shouldSetValues","shouldSetFields","unsetEmptyArray","updateFieldArrayDirty","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","isCurrentFieldPristine","setFieldArrayDirtyFields","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","live","getValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","clearErrors","inputName","setError","info","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","setFocus","useForm","_formControl"],"sources":["C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isCheckBoxInput.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isDateObject.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isNullOrUndefined.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isObject.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getControllerValue.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getNodeParentName.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\isNameInFieldArray.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\compact.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isUndefined.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\get.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\constants.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\omit.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useFormContext.tsx","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getProxyFormState.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isEmptyObject.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\shouldRenderFormState.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\convertToArrayPayload.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\shouldSubscribeByName.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useSubscribe.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useFormState.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isString.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\generateWatchOutput.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useWatch.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useController.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\controller.tsx","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\appendErrors.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isKey.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\stringToPath.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\set.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\focusFieldBy.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getFocusFieldName.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\mapCurrentIds.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\generateId.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\mapId.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\append.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\fillEmptyArray.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\insert.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\move.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\omitKeys.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\prepend.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\remove.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\swap.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\update.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useFieldArray.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isFunction.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\cloneObject.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\createSubject.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isPrimitive.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\deepEqual.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\getValidationModes.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isBoolean.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isFileInput.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isHTMLElement.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isMultipleSelect.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isRadioInput.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isRadioOrCheckbox.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isWeb.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\live.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\unset.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getCheckboxValue.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getFieldValueAs.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getRadioValue.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getFieldValue.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getResolverOptions.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\hasValidation.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\schemaErrorLookup.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\deepMerge.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\setFieldArrayDirtyFields.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\skipValidation.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\unsetEmptyArray.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isMessage.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\utils\\isRegex.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getValidateError.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\getValueAndMessage.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\validateField.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\logic\\createFormControl.ts","C:\\Users\\lenov\\Desktop\\waiter-app\\node_modules\\react-hook-form\\src\\useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\ntype Payload<T> = {\n  _subscription: React.MutableRefObject<Subscription | undefined>;\n  _props: React.MutableRefObject<Props<T>>;\n};\n\nconst tearDown = (\n  _subscription: React.MutableRefObject<Subscription | undefined>,\n) => {\n  if (_subscription.current) {\n    _subscription.current.unsubscribe();\n    _subscription.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps = <T>({ _subscription, _props }: Payload<T>) => {\n  if (_props.current.disabled) {\n    tearDown(_subscription);\n  } else if (!_subscription.current) {\n    _subscription.current = _props.current.subject.subscribe({\n      next: _props.current.callback,\n    });\n  }\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _subscription = React.useRef<Subscription>();\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  updateSubscriptionProps({\n    _subscription,\n    _props,\n  });\n\n  React.useEffect(() => {\n    updateSubscriptionProps({\n      _subscription,\n      _props,\n    });\n\n    return () => tearDown(_subscription);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        formState.name,\n      ) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport function generateWatchOutput(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n}\n","import * as React from 'react';\n\nimport { generateWatchOutput } from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: TFieldNames;\n  defaultValue?: UnpackNestedValue<DeepPartialSkipArrayKey<TFieldValues>>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(): FieldPathValues<TFieldValues, TFieldNames>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.watch,\n    callback: (formState) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n        )\n      ) {\n        const fieldValues = generateWatchOutput(\n          _name.current as InternalFieldName | InternalFieldName[],\n          control._names,\n          formState.values || control._formValues,\n        );\n\n        updateValue(\n          isUndefined(_name.current)\n            ? { ...fieldValues }\n            : Array.isArray(fieldValues)\n            ? [...fieldValues]\n            : fieldValues,\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? control._getWatch(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    control._removeUnmounted();\n  });\n\n  return value;\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  });\n  const formState = useFormState({\n    control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  React.useEffect(() => {\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name, { keepDefaultValue: true });\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister]);\n\n  return {\n    field: {\n      onChange: (event) => {\n        registerProps.onChange({\n          target: {\n            value: getControllerValue(event),\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import * as React from 'react';\n\nimport { FieldValues } from '../types';\n\nexport default <T, K>(\n  values: T[],\n  _fieldIds: React.MutableRefObject<K>,\n  keyName: string,\n) =>\n  values.map((value, index) => {\n    const output = _fieldIds.current[index as keyof K];\n\n    return {\n      ...value,\n      ...(output ? { [keyName]: (output as FieldValues)[keyName] } : {}),\n    };\n  });\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayPath, FieldArrayWithId, FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TFieldName extends FieldArrayPath<TFieldArrayValues> = FieldArrayPath<TFieldArrayValues>,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[] =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    ...(value[keyName] ? {} : { [keyName]: generateId() }),\n    ...value,\n  })) as Partial<FieldArrayWithId<TFieldArrayValues, TFieldName, TKeyName>>[];\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(data), ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...convertToArrayPayload(data)];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default <T>(fieldValues: T[], index: number, value: any) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport mapCurrentIds from './logic/mapCurrentIds';\nimport mapIds from './logic/mapId';\nimport appendAt from './utils/append';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport moveArrayAt from './utils/move';\nimport omitKeys from './utils/omitKeys';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport updateAt from './utils/update';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id' as TKeyName,\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(mapIds(control._getFieldArray(name), keyName));\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  useSubscribe({\n    callback: ({ values, name: fieldArrayName }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        setFields(mapIds(get(values, _name.current), keyName));\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValuesWithKey: T,\n    ) => {\n      const updatedFieldArrayValues = omitKeys(\n        updatedFieldArrayValuesWithKey,\n        keyName,\n      );\n      _actioned.current = true;\n      set(control._formValues, name, updatedFieldArrayValues);\n      return updatedFieldArrayValues;\n    },\n    [control, name, keyName],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValuesWithKey = appendAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(appendValue, keyName),\n    );\n    control._updateFieldArray(\n      name,\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValuesWithKey.length - appendValue.length,\n      options,\n    );\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = prependAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, 0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n    );\n    control._updateFieldArray(\n      name,\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const updatedFieldArrayValuesWithKey = insertAt(\n      mapCurrentIds(control._getFieldArray(name), _fieldIds, keyName),\n      index,\n      mapIds(convertToArrayPayload(value), keyName),\n    );\n    control._updateFieldArray(\n      name,\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n\n    control._names.focus = getFocusFieldName(name, index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    swapArrayAt(updatedFieldArrayValuesWithKey, indexA, indexB);\n    control._updateFieldArray(\n      name,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    moveArrayAt(updatedFieldArrayValuesWithKey, from, to);\n    control._updateFieldArray(\n      name,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      updateValues(updatedFieldArrayValuesWithKey),\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  const update = (\n    index: number,\n    value: Partial<FieldArray<TFieldValues, TFieldArrayName>>,\n  ) => {\n    const updatedFieldArrayValuesWithKey = mapCurrentIds(\n      control._getFieldArray(name),\n      _fieldIds,\n      keyName,\n    );\n    const updatedFieldArrayValues = updateAt(\n      updatedFieldArrayValuesWithKey,\n      index,\n      value,\n    );\n    _fieldIds.current = mapIds(updatedFieldArrayValues, keyName);\n    control._updateFieldArray(\n      name,\n      updateAt,\n      {\n        argA: index,\n        argB: value,\n      },\n      updateValues(_fieldIds.current),\n      true,\n      false,\n    );\n    setFields(_fieldIds.current);\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValuesWithKey: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = mapIds(convertToArrayPayload(value), keyName);\n    control._updateFieldArray(\n      name,\n      () => updatedFieldArrayValuesWithKey,\n      {},\n      updateValues(updatedFieldArrayValuesWithKey),\n      true,\n      false,\n    );\n    setFields(updatedFieldArrayValuesWithKey);\n  };\n\n  React.useEffect(() => {\n    control._stateFlags.action = false;\n\n    if (control._names.watchAll) {\n      control._subjects.state.next({});\n    } else {\n      for (const watchField of control._names.watch) {\n        if (name.startsWith(watchField)) {\n          control._subjects.state.next({});\n          break;\n        }\n      }\n    }\n\n    if (_actioned.current) {\n      control._executeSchema([name]).then((result) => {\n        const error = get(result.errors, name);\n\n        if (error && error.type && !get(control._formState.errors, name)) {\n          set(control._formState.errors, name, error);\n          control._subjects.state.next({\n            errors: control._formState.errors as FieldErrors<TFieldValues>,\n          });\n        }\n      });\n    }\n\n    control._subjects.watch.next({\n      name,\n      values: control._formValues,\n    });\n\n    control._names.focus &&\n      focusFieldBy(control._fields, (key: string) =>\n        key.startsWith(control._names.focus),\n      );\n\n    control._names.focus = '';\n\n    control._proxyFormState.isValid && control._updateValid();\n  }, [fields, name, control, keyName]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && set(control._formValues, name, []);\n\n    return () => {\n      if (control._options.shouldUnregister || shouldUnregister) {\n        control.unregister(name as FieldPath<TFieldValues>);\n      }\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control, keyName]),\n    move: React.useCallback(move, [updateValues, name, control, keyName]),\n    prepend: React.useCallback(prepend, [updateValues, name, control, keyName]),\n    append: React.useCallback(append, [updateValues, name, control, keyName]),\n    remove: React.useCallback(remove, [updateValues, name, control, keyName]),\n    insert: React.useCallback(insert, [updateValues, name, control, keyName]),\n    update: React.useCallback(update, [updateValues, name, control, keyName]),\n    replace: React.useCallback(replace, [updateValues, name, control, keyName]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport { generateWatchOutput } from './generateWatchOutput';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) &&\n      !options.disabled &&\n      set(_formValues, name, get(_formValues, name, options.value));\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = _options.shouldUnregister\n        ? cloneObject(_formValues)\n        : { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (isUndefined(options.defaultValue)) {\n      setValue(name, get(_defaultValues, name));\n    } else {\n      setValue(name, options.defaultValue);\n      set(_defaultValues, name, options.defaultValue);\n    }\n\n    if (!options.keepTouched) {\n      unset(_formState.touchedFields, name);\n    }\n\n    if (!options.keepDirty) {\n      unset(_formState.dirtyFields, name);\n      _formState.isDirty = options.defaultValue\n        ? _getDirty(name, get(_defaultValues, name))\n        : _getDirty();\n    }\n\n    if (!options.keepError) {\n      unset(_formState.errors, name);\n      _proxyFormState.isValid && _updateValid();\n    }\n\n    _subjects.state.next({ ..._formState });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values = !isEmptyObject(formValues)\n      ? cloneUpdatedValues\n      : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.watch.next({\n        values,\n      });\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}