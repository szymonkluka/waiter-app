{"ast":null,"code":"import shortid from \"shortid\";\nexport const getAllPosts = _ref => {\n  let {\n    posts\n  } = _ref;\n  return posts;\n};\nexport const getPostByID = (_ref2, postsId) => {\n  let {\n    posts\n  } = _ref2;\n  return posts.find(list => list.id === postsId);\n};\nexport const getAllCategories = _ref3 => {\n  let {\n    categories\n  } = _ref3;\n  return categories;\n};\nexport const getCategoryByPost = (_ref4, category) => {\n  let {\n    posts\n  } = _ref4;\n  return posts.filter(post => post.category === category);\n};\nexport const categoriesReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    default:\n      return statePart;\n  }\n};\nexport const getCategories = _ref5 => {\n  let {\n    categories\n  } = _ref5;\n  return categories;\n};\nexport const deletePost = payload => ({\n  type: DELETE_POST,\n  payload\n});\nexport const addPost = payload => ({\n  type: ADD_POST,\n  payload\n});\nexport const editPost = payload => ({\n  type: EDIT_POST,\n  payload\n});\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST');\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\nconst postsReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case DELETE_POST:\n      return statePart.filter(post => post.id !== action.payload);\n    case ADD_POST:\n      return [...statePart, {\n        ...action.payload,\n        id: shortid()\n      }];\n    case EDIT_POST:\n      return statePart.map(post => post.id === action.payload.id ? {\n        ...post,\n        ...action.payload\n      } : post);\n    default:\n      return statePart;\n  }\n  ;\n};\nexport default postsReducer;","map":{"version":3,"names":["shortid","getAllPosts","posts","getPostByID","postsId","find","list","id","getAllCategories","categories","getCategoryByPost","category","filter","post","categoriesReducer","statePart","action","type","getCategories","deletePost","payload","DELETE_POST","addPost","ADD_POST","editPost","EDIT_POST","createActionName","actionName","postsReducer","map"],"sources":["C:/Users/lenov/Desktop/react-blog-new/src/redux/postsRedux.js"],"sourcesContent":["import shortid from \"shortid\";\n\nexport const getAllPosts = ({ posts }) => posts;\nexport const getPostByID = ({ posts }, postsId) => posts.find(list => list.id === postsId);\n\nexport const getAllCategories = ({ categories }) => categories;\nexport const getCategoryByPost = ({ posts }, category) => posts.filter(post => post.category === category);\n\nexport const categoriesReducer = (statePart = [], action) => {\n  switch (action.type) {\n    default: return statePart;\n  }\n};\n\nexport const getCategories = ({ categories }) => categories;\n\nexport const deletePost = payload => ({ type: DELETE_POST, payload })\nexport const addPost = payload => ({ type: ADD_POST, payload });\nexport const editPost = payload => ({ type: EDIT_POST, payload });\n\nconst createActionName = actionName => `app/posts/${actionName}`;\nconst DELETE_POST = createActionName('DELETE_POST')\nconst ADD_POST = createActionName('ADD_POST');\nconst EDIT_POST = createActionName('EDIT_POST');\n\nconst postsReducer = (statePart = [], action) => {\n  switch (action.type) {\n    case DELETE_POST:\n      return statePart.filter(post => post.id !== action.payload)\n    case ADD_POST:\n      return [...statePart, { ...action.payload, id: shortid() }];\n    case EDIT_POST:\n      return statePart.map(post => (post.id === action.payload.id) ? { ...post, ...action.payload } : post);\n    default:\n      return statePart;\n  };\n};\n\nexport default postsReducer;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAE7B,OAAO,MAAMC,WAAW,GAAG;EAAA,IAAC;IAAEC;EAAM,CAAC;EAAA,OAAKA,KAAK;AAAA;AAC/C,OAAO,MAAMC,WAAW,GAAG,QAAYC,OAAO;EAAA,IAAlB;IAAEF;EAAM,CAAC;EAAA,OAAcA,KAAK,CAACG,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO,CAAC;AAAA;AAE1F,OAAO,MAAMI,gBAAgB,GAAG;EAAA,IAAC;IAAEC;EAAW,CAAC;EAAA,OAAKA,UAAU;AAAA;AAC9D,OAAO,MAAMC,iBAAiB,GAAG,QAAYC,QAAQ;EAAA,IAAnB;IAAET;EAAM,CAAC;EAAA,OAAeA,KAAK,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,QAAQ,KAAKA,QAAQ,CAAC;AAAA;AAE1G,OAAO,MAAMG,iBAAiB,GAAG,YAA4B;EAAA,IAA3BC,SAAS,uEAAG,EAAE;EAAA,IAAEC,MAAM;EACtD,QAAQA,MAAM,CAACC,IAAI;IACjB;MAAS,OAAOF,SAAS;EAAC;AAE9B,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG;EAAA,IAAC;IAAET;EAAW,CAAC;EAAA,OAAKA,UAAU;AAAA;AAE3D,OAAO,MAAMU,UAAU,GAAGC,OAAO,KAAK;EAAEH,IAAI,EAAEI,WAAW;EAAED;AAAQ,CAAC,CAAC;AACrE,OAAO,MAAME,OAAO,GAAGF,OAAO,KAAK;EAAEH,IAAI,EAAEM,QAAQ;EAAEH;AAAQ,CAAC,CAAC;AAC/D,OAAO,MAAMI,QAAQ,GAAGJ,OAAO,KAAK;EAAEH,IAAI,EAAEQ,SAAS;EAAEL;AAAQ,CAAC,CAAC;AAEjE,MAAMM,gBAAgB,GAAGC,UAAU,IAAK,aAAYA,UAAW,EAAC;AAChE,MAAMN,WAAW,GAAGK,gBAAgB,CAAC,aAAa,CAAC;AACnD,MAAMH,QAAQ,GAAGG,gBAAgB,CAAC,UAAU,CAAC;AAC7C,MAAMD,SAAS,GAAGC,gBAAgB,CAAC,WAAW,CAAC;AAE/C,MAAME,YAAY,GAAG,YAA4B;EAAA,IAA3Bb,SAAS,uEAAG,EAAE;EAAA,IAAEC,MAAM;EAC1C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKI,WAAW;MACd,OAAON,SAAS,CAACH,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKS,MAAM,CAACI,OAAO,CAAC;IAC7D,KAAKG,QAAQ;MACX,OAAO,CAAC,GAAGR,SAAS,EAAE;QAAE,GAAGC,MAAM,CAACI,OAAO;QAAEb,EAAE,EAAEP,OAAO;MAAG,CAAC,CAAC;IAC7D,KAAKyB,SAAS;MACZ,OAAOV,SAAS,CAACc,GAAG,CAAChB,IAAI,IAAKA,IAAI,CAACN,EAAE,KAAKS,MAAM,CAACI,OAAO,CAACb,EAAE,GAAI;QAAE,GAAGM,IAAI;QAAE,GAAGG,MAAM,CAACI;MAAQ,CAAC,GAAGP,IAAI,CAAC;IACvG;MACE,OAAOE,SAAS;EAAC;EACpB;AACH,CAAC;AAED,eAAea,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}